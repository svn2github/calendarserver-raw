Index: twisted/web2/dav/stream.py
===================================================================
--- twisted/web2/dav/stream.py	(revision 0)
+++ twisted/web2/dav/stream.py	(revision 0)
@@ -0,0 +1,76 @@
+##
+# Copyright (c) 2005-2007 Apple Inc. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+# 
+# The above copyright notice and this permission notice shall be included in all
+# copies or substantial portions of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+# SOFTWARE.
+#
+# DRI: Cyrus Daboo, cdaboo@apple.com
+##
+
+"""
+Class that implements a stream that calculates the MD5 hash of the data
+as the data is read.
+"""
+
+__all__ = ["MD5StreamWrapper"]
+
+from twisted.internet.defer import Deferred
+from twisted.web2.stream import SimpleStream
+
+import md5
+
+class MD5StreamWrapper(SimpleStream):
+ 
+    def __init__(self, wrap):
+        
+        assert wrap is not None, "Must have a stream to wrap."
+
+        self.stream = wrap
+
+        # Init MD5
+        self.md5 = md5.new()
+    
+    def read(self):
+        assert self.md5 is not None, "Cannot call read after close."
+
+        # Read from wrapped stream first
+        b = self.stream.read()
+        
+        if isinstance(b, Deferred):
+            def _gotData(data):
+                if data is not None:
+                    self.md5.update(data)
+                return data
+            b.addCallback(_gotData)
+        else:
+            # Update current MD5 state
+            if b is not None:
+                self.md5.update(str(b))
+    
+        return b
+    
+    def close(self):
+        # Close out the MD5 hash
+        self.md5value = self.md5.hexdigest()
+        self.md5 = None
+
+        SimpleStream.close(self)
+    
+    def getMD5(self):
+        assert hasattr(self, "md5value"), "Stream has to be closed first"
+        return self.md5value
