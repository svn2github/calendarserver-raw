Index: twisted/web2/server.py
===================================================================
--- twisted/web2/server.py	(revision 18375)
+++ twisted/web2/server.py	(working copy)
@@ -1,6 +1,8 @@
 # -*- test-case-name: twisted.web2.test.test_server -*-
 # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
 # See LICENSE for details.
+from twisted.internet.defer import succeed
+from twisted.web2.dav.util import joinURL
 
 
 """This is a web-sever which integrates with the twisted.internet
@@ -156,7 +158,9 @@
         self.resources = []
         http.Request.__init__(self, *args, **kw)
 
-    def addResponseFilter(self, f, atEnd=False):
+    def addResponseFilter(self, f, atEnd=False, onlyOnce = False):
+        if onlyOnce and f in self.responseFilters:
+            return
         if atEnd:
             self.responseFilters.append(f)
         else:
@@ -347,6 +351,7 @@
         return child
 
     _resourcesByURL = weakref.WeakKeyDictionary()
+    _resourcesFromURL = weakref.WeakValueDictionary()
 
     def _rememberURLForResource(self, url, resource):
         """
@@ -387,6 +392,11 @@
         """
         if url is None: return None
 
+        try:
+            return succeed(self._resourcesFromURL[url])
+        except KeyError:
+            pass
+
         #
         # Parse the URL
         #
@@ -417,7 +427,50 @@
                 raise f
             return None
 
-        return defer.maybeDeferred(self._getChild, None, self.site.resource, segments, updatepaths=False)
+        def _registerResource(child):
+            self._resourcesFromURL[url] = child
+            return child
+        
+        d = defer.maybeDeferred(self._getChild, None, self.site.resource, segments, updatepaths=False)
+        d.addCallback(_registerResource)
+        return d
+
+    def locateChildResource(self, res, childpath):
+        """
+        Looks up the child resource with the given name given the parent resource.
+        @param uri: The URL last path segment of the desired resource.
+        @return: a L{Deferred} resulting in the L{IResource} at the
+            given URL or C{None} if no such resource can be located.
+        @raise HTTPError: If C{url} is not a URL on the site that this
+            request is being applied to.  The contained response will
+            have a status code of L{responsecode.BAD_GATEWAY}.
+        @raise HTTPError: If C{url} contains a query or fragment.
+            The contained response will have a status code of
+            L{responsecode.BAD_REQUEST}.
+        """
+        if res is None or childpath is None: return None
+        
+        url = joinURL(self.urlForResource(res), childpath)
+        try:
+            return succeed(self._resourcesFromURL[url])
+        except KeyError:
+            pass
+
+        segment = unquote(childpath)
+
+        def notFound(f):
+            f.trap(http.HTTPError)
+            if f.response.code != responsecode.NOT_FOUND:
+                raise f
+            return None
+
+        def _registerResource(child):
+            self._resourcesFromURL[url] = child
+            return child
+        
+        d = defer.maybeDeferred(self._getChild, None, res, [segment], updatepaths=False)
+        d.addCallback(_registerResource)
+        return d
 
     def _processingFailed(self, reason):
         if reason.check(http.HTTPError) is not None:
