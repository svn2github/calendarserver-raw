Index: twisted/words/protocols/jabber/sasl_mechanisms.py
===================================================================
--- twisted/words/protocols/jabber/sasl_mechanisms.py	(revision 19773)
+++ twisted/words/protocols/jabber/sasl_mechanisms.py	(working copy)
@@ -7,8 +7,13 @@
 Protocol agnostic implementations of SASL authentication mechanisms.
 """
 
-import md5, binascii, random, time, os
+import binascii, random, time, os
 
+try:
+    from hashlib import md5
+except ImportError:
+    import md5.new as md5
+
 from zope.interface import Interface, Attribute, implements
 
 class ISASLMechanism(Interface):
@@ -108,16 +113,43 @@
         @return: challenge directives and their values.
         @rtype: L{dict} of L{str} to L{str}.
         """
-        directive_list = challenge.split(',')
-        directives = {}
-        for directive in directive_list:
-            name, value = directive.split('=')
-            value = value.replace("'","")
-            value = value.replace('"','')
-            directives[name] = value
-        return directives
+        s = challenge
+        paramDict = {}
+        cur = 0
+        remainingParams = True
+        while remainingParams:
+            # Parse a param. We can't just split on commas, because there can
+            # be some commas inside (quoted) param values, e.g.:
+            # qop="auth,auth-int"
 
+            middle = s.index("=", cur)
+            name = s[cur:middle].lstrip()
+            middle += 1
+            if s[middle] == '"':
+                middle += 1
+                end = s.index('"', middle)
+                value = s[middle:end]
+                cur = s.find(',', end) + 1
+                if cur == 0:
+                    remainingParams = False
+            else:
+                end = s.find(',', middle)
+                if end == -1:
+                    value = s[middle:].rstrip()
+                    remainingParams = False
+                else:
+                    value = s[middle:end].rstrip()
+                cur = end + 1
+            paramDict[name] = value
 
+        for param in ('qop', 'cipher'):
+            if param in paramDict:
+                paramDict[param] = paramDict[param].split(',')
+
+        return paramDict
+
+
+
     def _unparse(self, directives):
         """
         Create message string from directives.
@@ -153,7 +185,7 @@
         """
 
         def H(s):
-            return md5.new(s).digest()
+            return md5(s).digest()
 
         def HEX(n):
             return binascii.b2a_hex(n)
@@ -196,4 +228,4 @@
 
 
     def _gen_nonce(self):
-        return md5.new("%s:%s:%s" % (str(random.random()) , str(time.gmtime()),str(os.getpid()))).hexdigest()
+        return md5("%s:%s:%s" % (str(random.random()) , str(time.gmtime()),str(os.getpid()))).hexdigest()
