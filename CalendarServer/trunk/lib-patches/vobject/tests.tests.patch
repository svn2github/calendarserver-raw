Index: tests/tests.py
===================================================================
--- tests/tests.py	(revision 164)
+++ tests/tests.py	(working copy)
@@ -280,7 +280,7 @@
     >>> silly.stuff
     <STUFF{}foldedline>
     >>> original = silly.serialize()
-    >>> f3 = StringIO.StringIO(original)
+    >>> f3 = StringIO.StringIO(original.decode("utf-8"))
     >>> silly2 = base.readOne(f3)
     >>> silly2.serialize()==original
     True
@@ -289,7 +289,7 @@
     >>> ex1
     <*unnamed*| [<CN{}Babs Jensen>, <CN{}Barbara J Jensen>, <EMAIL{}babs@umich.edu>, <PHONE{}+1 313 747-4454>, <SN{}Jensen>, <X-ID{}1234567890>]>
     >>> ex1.serialize()
-    u'CN:Babs Jensen\r\nCN:Barbara J Jensen\r\nEMAIL:babs@umich.edu\r\nPHONE:+1 313 747-4454\r\nSN:Jensen\r\nX-ID:1234567890\r\n'
+    'CN:Babs Jensen\r\nCN:Barbara J Jensen\r\nEMAIL:babs@umich.edu\r\nPHONE:+1 313 747-4454\r\nSN:Jensen\r\nX-ID:1234567890\r\n'
     """,
     
     "Import icaltest" :
@@ -306,7 +306,7 @@
     >>> c.vevent.valarm.description.value
     u'Event reminder, with comma\nand line feed'
     >>> c.vevent.valarm.description.serialize()
-    u'DESCRIPTION:Event reminder\\, with comma\\nand line feed\r\n'
+    'DESCRIPTION:Event reminder\\, with comma\\nand line feed\r\n'
     >>> vevent = c.vevent.transformFromNative()
     >>> vevent.rrule
     <RRULE{}FREQ=Weekly;COUNT=10>
@@ -352,6 +352,7 @@
     >>> vevent.summary.value
     u'The title \u3053\u3093\u306b\u3061\u306f\u30ad\u30c6\u30a3'
     >>> summary = vevent.summary.value
+    >>> test = str(vevent.serialize()),
     """,
     
     # make sure date valued UNTILs in rrules are in a reasonable timezone,
@@ -690,9 +691,9 @@
     u'home'
     >>> card.group = card.tel.group = 'new'
     >>> card.tel.serialize().strip()
-    u'new.TEL;TYPE=fax,voice,msg:+49 3581 123456'
+    'new.TEL;TYPE=fax,voice,msg:+49 3581 123456'
     >>> card.serialize().splitlines()[0]
-    u'new.BEGIN:VCARD'
+    'new.BEGIN:VCARD'
     >>> dtstart = base.newFromBehavior('dtstart')
     >>> dtstart.group = "badgroup"
     >>> dtstart.serialize()
