Binary files ./build/lib.macosx-10.6-universal-2.6/_xmlplus/parsers/pyexpat.so and ../PyXML-0.8.4-patched/build/lib.macosx-10.6-universal-2.6/_xmlplus/parsers/pyexpat.so differ
Binary files ./build/lib.macosx-10.6-universal-2.6/_xmlplus/parsers/sgmlop.so and ../PyXML-0.8.4-patched/build/lib.macosx-10.6-universal-2.6/_xmlplus/parsers/sgmlop.so differ
Binary files ./build/lib.macosx-10.6-universal-2.6/_xmlplus/utils/boolean.so and ../PyXML-0.8.4-patched/build/lib.macosx-10.6-universal-2.6/_xmlplus/utils/boolean.so differ
diff -ur ./xml/xpath/ParsedAbbreviatedAbsoluteLocationPath.py ../PyXML-0.8.4-patched/xml/xpath/ParsedAbbreviatedAbsoluteLocationPath.py
--- ./xml/xpath/ParsedAbbreviatedAbsoluteLocationPath.py	2003-03-11 06:01:34.000000000 -0800
+++ ../PyXML-0.8.4-patched/xml/xpath/ParsedAbbreviatedAbsoluteLocationPath.py	2009-04-29 09:42:00.000000000 -0700
@@ -24,8 +24,8 @@
         self._rel = rel
         nt = ParsedNodeTest.ParsedNodeTest('node', '')
         ppl = ParsedPredicateList.ParsedPredicateList([])
-        as = ParsedAxisSpecifier.ParsedAxisSpecifier('descendant-or-self')
-        self._step = ParsedStep.ParsedStep(as, nt, ppl)
+        as_ = ParsedAxisSpecifier.ParsedAxisSpecifier('descendant-or-self')
+        self._step = ParsedStep.ParsedStep(as_, nt, ppl)
         return
 
     def evaluate(self, context):
diff -ur ./xml/xpath/ParsedAbbreviatedRelativeLocationPath.py ../PyXML-0.8.4-patched/xml/xpath/ParsedAbbreviatedRelativeLocationPath.py
--- ./xml/xpath/ParsedAbbreviatedRelativeLocationPath.py	2003-03-11 06:01:34.000000000 -0800
+++ ../PyXML-0.8.4-patched/xml/xpath/ParsedAbbreviatedRelativeLocationPath.py	2009-04-29 09:42:00.000000000 -0700
@@ -28,8 +28,8 @@
         self._right = right
         nt = ParsedNodeTest.ParsedNodeTest('node','')
         ppl = ParsedPredicateList.ParsedPredicateList([])
-        as = ParsedAxisSpecifier.ParsedAxisSpecifier('descendant-or-self')
-        self._middle = ParsedStep.ParsedStep(as, nt, ppl)
+        as_ = ParsedAxisSpecifier.ParsedAxisSpecifier('descendant-or-self')
+        self._middle = ParsedStep.ParsedStep(as_, nt, ppl)
 
     def evaluate(self, context):
         res = []
