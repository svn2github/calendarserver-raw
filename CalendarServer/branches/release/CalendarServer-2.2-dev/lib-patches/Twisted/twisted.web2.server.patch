Index: twisted/web2/server.py
===================================================================
--- twisted/web2/server.py	(revision 19773)
+++ twisted/web2/server.py	(working copy)
@@ -26,6 +26,7 @@
 from twisted.web2 import http_headers
 from twisted.web2.filter.range import rangefilter
 from twisted.web2 import error
+from twisted.web2.dav.util import joinURL
 
 from twisted.web2 import version as web2_version
 from twisted import __version__ as twisted_version
@@ -143,6 +144,9 @@
                        error.defaultErrorHandler, defaultHeadersFilter]
     
     def __init__(self, *args, **kw):
+        
+        self.initTime = time.time()
+
         if kw.has_key('site'):
             self.site = kw['site']
             del kw['site']
@@ -150,17 +154,36 @@
             self._initialprepath = kw['prepathuri']
             del kw['prepathuri']
 
+        self._resourcesByURL = {}
+        self._urlsByResource = {}
+
         # Copy response filters from the class
         self.responseFilters = self.responseFilters[:]
         self.files = {}
         self.resources = []
         http.Request.__init__(self, *args, **kw)
+        try:
+            self.serverInstance = self.chanRequest.channel.transport.server.port
+        except AttributeError:
+            self.serverInstance = "Unknown"
 
-    def addResponseFilter(self, f, atEnd=False):
+    def addResponseFilter(self, filter, atEnd=False, onlyOnce=False):
+        """
+        Add a response filter to this request.
+        Response filters are applied to the response to this request in order.
+        @param filter: a callable which takes an response argument and returns
+            a response object.
+        @param atEnd: if C{True}, C{filter} is added at the end of the list of
+            response filters; if C{False}, it is added to the beginning.
+        @param onlyOnce: if C{True}, C{filter} is not added to the list of
+            response filters if it already in the list.
+        """
+        if onlyOnce and filter in self.responseFilters:
+            return
         if atEnd:
-            self.responseFilters.append(f)
+            self.responseFilters.append(filter)
         else:
-            self.responseFilters.insert(0, f)
+            self.responseFilters.insert(0, filter)
 
     def unparseURL(self, scheme=None, host=None, port=None,
                    path=None, params=None, querystring=None, fragment=None):
@@ -265,6 +288,7 @@
         
         d = defer.Deferred()
         d.addCallback(self._getChild, self.site.resource, self.postpath)
+        d.addCallback(self._rememberResource, "/" + "/".join(quote(s) for s in self.postpath))
         d.addCallback(lambda res, req: res.renderHTTP(req), self)
         d.addCallback(self._cbFinishRender)
         d.addErrback(self._processingFailed)
@@ -280,6 +304,16 @@
             response = http.Response(responsecode.OK)
             response.headers.setHeader('allow', ('GET', 'HEAD', 'OPTIONS', 'TRACE'))
             return response
+
+        elif self.method == "POST":
+            # Allow other methods to tunnel through using POST and a request header.
+            # See http://code.google.com/apis/gdata/docs/2.0/basics.html
+            if self.headers.hasHeader("X-HTTP-Method-Override"):
+                intendedMethod = self.headers.getRawHeaders("X-HTTP-Method-Override")[0];
+                if intendedMethod:
+                    self.originalMethod = self.method
+                    self.method = intendedMethod
+        
         # This is where CONNECT would go if we wanted it
         return None
     
@@ -321,7 +355,6 @@
         if newpath is StopTraversal:
             # We need to rethink how to do this.
             #if newres is res:
-                self._rememberResource(res, url)
                 return res
             #else:
             #    raise ValueError("locateChild must not return StopTraversal with a resource other than self.")
@@ -337,7 +370,6 @@
                 self.prepath.append(self.postpath.pop(0))
 
         child = self._getChild(None, newres, newpath, updatepaths=updatepaths)
-        self._rememberResource(child, url)
 
         return child
 
@@ -347,6 +379,7 @@
         """
         Remember the URL of a visited resource.
         """
+        self._resourcesByURL[url] = resource
         self._urlsByResource[resource] = url
         return resource
 
@@ -386,7 +419,8 @@
             The contained response will have a status code of
             L{responsecode.BAD_REQUEST}.
         """
-        if url is None: return None
+        if url is None:
+            return defer.succeed(None)
 
         #
         # Parse the URL
@@ -407,9 +441,13 @@
                 "URL is not on this site (%s://%s/): %s" % (scheme, self.headers.getHeader("host"), url)
             ))
 
-        segments = path.split("/")
+        # Look for cached value
+        cached = self._resourcesByURL.get(path, None)
+        if cached is not None:
+            return defer.succeed(cached)
+
+        segments = unquote(path).split("/")
         assert segments[0] == "", "URL path didn't begin with '/': %s" % (path,)
-        segments = map(unquote, segments[1:])
 
         def notFound(f):
             f.trap(http.HTTPError)
@@ -417,7 +455,7 @@
                 return f
             return None
 
-        d = defer.maybeDeferred(self._getChild, None, self.site.resource, segments, updatepaths=False)
+        d = defer.maybeDeferred(self._getChild, None, self.site.resource, segments[1:], updatepaths=False)
         d.addCallback(self._rememberResource, path)
         d.addErrback(notFound)
         return d
