Index: twisted/web2/dav/xattrprops.py
===================================================================
--- twisted/web2/dav/xattrprops.py	(revision 19773)
+++ twisted/web2/dav/xattrprops.py	(working copy)
@@ -33,12 +33,18 @@
 
 import urllib
 import sys
+import zlib
+from time import sleep
+from random import random
+from errno import EAGAIN
+from zlib import compress, decompress
 
 import xattr
 
 if getattr(xattr, 'xattr', None) is None:
     raise ImportError("wrong xattr package imported")
 
+from twisted.python import log
 from twisted.web2 import responsecode
 from twisted.web2.http import HTTPError, StatusResponse
 from twisted.web2.dav import davxml
@@ -66,16 +72,8 @@
         deadPropertyXattrPrefix = "user."
 
     def _encode(clazz, name):
-        #
-        # FIXME: The xattr API in Mac OS 10.4.2 breaks if you have "/" in an
-        # attribute name (radar://4202440). We'll quote the strings to get rid
-        # of "/" characters for now.
-        #
-        result = list("{%s}%s" % name)
-        for i in range(len(result)):
-            c = result[i]
-            if c in "%/": result[i] = "%%%02X" % (ord(c),)
-        r = clazz.deadPropertyXattrPrefix + ''.join(result)
+        result = urllib.quote("{%s}%s" % name, safe='{}:')
+        r = clazz.deadPropertyXattrPrefix + result
         return r
 
     def _decode(clazz, name):
@@ -97,19 +95,41 @@
 
     def get(self, qname):
         try:
-            value = self.attrs[self._encode(qname)]
+            data = self.attrs[self._encode(qname)]
+            try:
+                value = decompress(data)
+            except zlib.error:
+                # Value is not compressed; data was stored by old
+                # code.  This is easy to handle, so let's keep
+                # compatibility here.
+                value = data
+            del data
         except KeyError:
             raise HTTPError(StatusResponse(
                 responsecode.NOT_FOUND,
                 "No such property: {%s}%s" % qname
             ))
 
-        doc = davxml.WebDAVDocument.fromString(value)
+        try:
+            doc = davxml.WebDAVDocument.fromString(value)
 
-        return doc.root_element
+            return doc.root_element
+        except ValueError:
+            msg = "Invalid property value stored on server: {%s}%s %s" % (qname[0], qname[1], value)
+            log.err(msg)
+            raise HTTPError(StatusResponse(responsecode.INTERNAL_SERVER_ERROR, msg))
 
     def set(self, property):
-        self.attrs[self._encode(property.qname())] = property.toxml()
+        for n in range(20):
+            try:
+                self.attrs[self._encode(property.qname())] = compress(property.toxml())
+            except IOError, error:
+                if error.errno != EAGAIN:
+                    raise
+                sleep(random() / 10) # OMG Brutal Hax
+            else:
+                break
+    
 
         # Update the resource because we've modified it
         self.resource.fp.restat()
