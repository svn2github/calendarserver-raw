Index: twisted/web2/http.py
===================================================================
--- twisted/web2/http.py	(revision 19773)
+++ twisted/web2/http.py	(working copy)
@@ -26,7 +26,7 @@
 from twisted.web2 import http_headers
 from twisted.web2 import iweb
 from twisted.web2 import stream
-from twisted.web2.stream import IByteStream
+from twisted.web2.stream import IByteStream, readAndDiscard
 
 defaultPortForScheme = {'http': 80, 'https':443, 'ftp':21}
 
@@ -66,9 +66,9 @@
             object.
         @type codeOrResponse: C{int} or L{http.Response}
         """
-        Exception.__init__(self)
-        self.response = iweb.IResponse(codeOrResponse)
-        self.args = str(self.response)
+        response = iweb.IResponse(codeOrResponse)
+        Exception.__init__(self, str(response))
+        self.response = response
 
     def __repr__(self):
         return "<%s %s>" % (self.__class__.__name__, self.response)
@@ -408,9 +408,22 @@
     def _sendContinue(self):
         self.chanRequest.writeIntermediateResponse(responsecode.CONTINUE)
 
-    def _finished(self, x):
+    def _reallyFinished(self, x):
         """We are finished writing data."""
         self.chanRequest.finish()
+        
+    def _finished(self, x):
+        """
+        We are finished writing data.
+        But we need to check that we have also finished reading all data as we
+        might have sent a, for example, 401 response before we read any data.
+        To make sure that the stream/producer sequencing works properly we need
+        to discard the remaining data in the request.  
+        """
+        if self.stream.length != 0:
+            return readAndDiscard(self.stream).addCallback(self._reallyFinished).addErrback(self._error)
+        else:
+            self._reallyFinished(x)
 
     def _error(self, reason):
         if reason.check(error.ConnectionLost):
