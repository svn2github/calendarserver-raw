Index: twisted/web2/dav/static.py
===================================================================
--- twisted/web2/dav/static.py	(revision 19773)
+++ twisted/web2/dav/static.py	(working copy)
@@ -28,16 +28,17 @@
 
 __all__ = ["DAVFile"]
 
-import os
-
+from twisted.internet.defer import succeed, deferredGenerator, waitForDeferred
+from twisted.python.filepath import InsecurePath
 from twisted.python import log
-from twisted.internet.defer import succeed, deferredGenerator, waitForDeferred
-from twisted.web2.static import File
+from twisted.web2 import http_headers
 from twisted.web2 import responsecode, dirlist
-from twisted.web2.http import RedirectResponse
 from twisted.web2.dav import davxml
 from twisted.web2.dav.resource import DAVResource, davPrivilegeSet
+from twisted.web2.dav.resource import TwistedGETContentMD5
 from twisted.web2.dav.util import bindMethods
+from twisted.web2.http import HTTPError, StatusResponse, RedirectResponse
+from twisted.web2.static import File
 
 try:
     from twisted.web2.dav.xattrprops import xattrPropertyStore as DeadPropertyStore
@@ -52,9 +53,11 @@
 
     Extends twisted.web2.static.File to handle WebDAV methods.
     """
-    def __init__(self, path,
-                 defaultType="text/plain",
-                 indexNames=None):
+    def __init__(
+        self, path,
+        defaultType="text/plain", indexNames=None,
+        principalCollections=()
+    ):
         """
         @param path: the path of the file backing this resource.
         @param defaultType: the default mime type (as a string) for this
@@ -62,11 +65,14 @@
         @param indexNames: a sequence of index file names.
         @param acl: an L{IDAVAccessControlList} with the .
         """
-        super(DAVFile, self).__init__(path,
-                                      defaultType = defaultType,
-                                      ignoredExts = (),
-                                      processors  = None,
-                                      indexNames  = indexNames)
+        File.__init__(
+            self, path,
+            defaultType = defaultType,
+            ignoredExts = (),
+            processors = None,
+            indexNames = indexNames,
+        )
+        DAVResource.__init__(self, principalCollections=principalCollections)
 
     def __repr__(self):
         return "<%s: %s>" % (self.__class__.__name__, self.fp.path)
@@ -75,6 +81,13 @@
     # WebDAV
     ##
 
+    def etag(self):
+        if not self.fp.exists(): return None
+        if self.hasDeadProperty(TwistedGETContentMD5):
+            return http_headers.ETag(str(self.readDeadProperty(TwistedGETContentMD5)))
+        else:
+            return super(DAVFile, self).etag()
+
     def davComplianceClasses(self):
         return ("1", "access-control") # Add "2" when we have locking
 
@@ -87,7 +100,6 @@
         """
         See L{IDAVResource.isCollection}.
         """
-        for child in self.listChildren(): return True
         return self.fp.isdir()
 
     ##
@@ -98,6 +110,50 @@
         return succeed(davPrivilegeSet)
 
     ##
+    # Quota
+    ##
+
+    def quotaSize(self, request):
+        """
+        Get the size of this resource.
+        TODO: Take into account size of dead-properties. Does stat
+            include xattrs size?
+
+        @return: an L{Deferred} with a C{int} result containing the size of the resource.
+        """
+        if self.isCollection():
+            def walktree(top):
+                """
+                Recursively descend the directory tree rooted at top,
+                calling the callback function for each regular file
+                
+                @param top: L{FilePath} for the directory to walk.
+                """
+            
+                total = 0
+                for f in top.listdir():
+                    child = top.child(f)
+                    if child.isdir():
+                        # It's a directory, recurse into it
+                        result = waitForDeferred(walktree(child))
+                        yield result
+                        total += result.getResult()
+                    elif child.isfile():
+                        # It's a file, call the callback function
+                        total += child.getsize()
+                    else:
+                        # Unknown file type, print a message
+                        pass
+            
+                yield total
+            
+            walktree = deferredGenerator(walktree)
+    
+            return walktree(self.fp)
+        else:
+            return succeed(self.fp.getsize())
+
+    ##
     # Workarounds for issues with File
     ##
 
@@ -112,8 +168,12 @@
         See L{IResource}C{.locateChild}.
         """
         # If getChild() finds a child resource, return it
-        child = self.getChild(segments[0])
-        if child is not None: return (child, segments[1:])
+        try:
+            child = self.getChild(segments[0])
+            if child is not None:
+                return (child, segments[1:])
+        except InsecurePath:
+            raise HTTPError(StatusResponse(responsecode.FORBIDDEN, "Invalid URL path"))
         
         # If we're not backed by a directory, we have no children.
         # But check for existance first; we might be a collection resource
@@ -132,7 +192,9 @@
         return (self.createSimilarFile(self.fp.child(path).path), segments[1:])
 
     def createSimilarFile(self, path):
-        return self.__class__(path, defaultType=self.defaultType, indexNames=self.indexNames[:])
+        return self.__class__(
+            path, defaultType=self.defaultType, indexNames=self.indexNames[:],
+            principalCollections=self.principalCollections())
 
 #
 # Attach method handlers to DAVFile
