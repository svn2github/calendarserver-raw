Index: twisted/web2/dav/method/report_principal_property_search.py
===================================================================
--- twisted/web2/dav/method/report_principal_property_search.py	(revision 19773)
+++ twisted/web2/dav/method/report_principal_property_search.py	(working copy)
@@ -51,6 +51,11 @@
         raise ValueError("%s expected as root element, not %s."
                          % (davxml.PrincipalPropertySearch.sname(), principal_property_search.sname()))
 
+    # Should we AND (the default) or OR (if test="anyof")?
+    testMode = principal_property_search.attributes.get("test", "allof")
+    if testMode not in ("allof", "anyof"):
+        raise ValueError("Unknown value for test attribute: %s" % (testMode,))
+
     # Only handle Depth: 0
     depth = request.headers.getHeader("depth", "0")
     if depth != "0":
@@ -93,31 +98,53 @@
         else:
             return False
         
-    def propertySearch(resource, request):
+    def propertySearch(resource, request, testMode):
         """
         Test the resource to see if it contains properties matching the
         property-search specification in this report.
         @param resource: the L{DAVFile} for the resource to test.
         @param request:  the current request.
+        @param testMode:  "allof" (AND operation) or "anyof" (OR operation)
         @return:         True if the resource has matching properties, False otherwise.
         """
-        for props, match in propertySearches:
-            # Test each property
-            for prop in props:
-                try:
-                    propvalue = waitForDeferred(resource.readProperty(prop.qname(), request))
-                    yield propvalue
-                    propvalue = propvalue.getResult()
-                    if propvalue and not nodeMatch(propvalue, match):
+
+        if testMode == "allof": # "AND"
+            for props, match in propertySearches:
+                # Test each property
+                for prop in props:
+                    try:
+                        propvalue = waitForDeferred(resource.readProperty(prop.qname(), request))
+                        yield propvalue
+                        propvalue = propvalue.getResult()
+                        if propvalue:
+                            if not nodeMatch(propvalue, match):
+                                yield False
+                                return
+                    except HTTPError:
+                        # No property => no match
                         yield False
                         return
-                except HTTPError:
-                    # No property => no match
-                    yield False
-                    return
-        
-        yield True
+            # we hit on every property
+            yield True
 
+        else: # "OR"
+            for props, match in propertySearches:
+                # Test each property
+                for prop in props:
+                    try:
+                        propvalue = waitForDeferred(resource.readProperty(prop.qname(), request))
+                        yield propvalue
+                        propvalue = propvalue.getResult()
+                        if propvalue:
+                            if nodeMatch(propvalue, match):
+                                yield True
+                                return
+                    except HTTPError:
+                        # No property
+                        pass
+            # we didn't hit any
+            yield False
+
     propertySearch = deferredGenerator(propertySearch)
 
     # Run report
@@ -127,13 +154,8 @@
         matchcount = 0
 
         if applyTo:
-            # Get the principal collection set
-            pset = waitForDeferred(self.principalCollections(request))
-            yield pset
-            pset = pset.getResult()
-
-            for phref in pset:
-                uri = str(phref)
+            for principalCollection in self.principalCollections():
+                uri = principalCollection.principalCollectionURL()
                 resource = waitForDeferred(request.locateResource(uri))
                 yield resource
                 resource = resource.getResult()
@@ -159,7 +181,7 @@
 
             for child, uri in children:
                 if isPrincipalResource(child):
-                    d = waitForDeferred(propertySearch(child, request))
+                    d = waitForDeferred(propertySearch(child, request, testMode))
                     yield d
                     d = d.getResult()
                     if d:
