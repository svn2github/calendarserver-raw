Index: twisted/web2/dav/method/propfind.py
===================================================================
--- twisted/web2/dav/method/propfind.py	(revision 19773)
+++ twisted/web2/dav/method/propfind.py	(working copy)
@@ -22,6 +22,7 @@
 #
 # DRI: Wilfredo Sanchez, wsanchez@apple.com
 ##
+from twisted.web2.dav.util import joinURL
 
 """
 WebDAV PROPFIND method
@@ -30,13 +31,12 @@
 __all__ = ["http_PROPFIND"]
 
 from twisted.python import log
-from twisted.python.failure import Failure
 from twisted.internet.defer import deferredGenerator, waitForDeferred
 from twisted.web2.http import HTTPError
 from twisted.web2 import responsecode
 from twisted.web2.http import StatusResponse
 from twisted.web2.dav import davxml
-from twisted.web2.dav.http import MultiStatusResponse, statusForFailure
+from twisted.web2.dav.http import MultiStatusResponse
 from twisted.web2.dav.util import normalizeURL, davXMLFromStream
 
 def http_PROPFIND(self, request):
@@ -114,79 +114,136 @@
     yield filtered_aces
     filtered_aces = filtered_aces.getResult()
 
-    resources = [(self, my_url)]
+    resources = [my_url.rstrip("/")]
 
-    d = self.findChildren(depth, request, lambda x, y: resources.append((x, y)), (davxml.Read(),), inherited_aces=filtered_aces)
-    x = waitForDeferred(d)
-    yield x
-    x.getResult()
+    if depth == "1":
+        d = self.findChildNames(request, lambda x: resources.append(joinURL(request.uri, x)), privileges=(davxml.Read(),), inherited_aces=filtered_aces)
+        x = waitForDeferred(d)
+        yield x
+        x.getResult()
+    # TODO: depth=infinity
 
-    for resource, uri in resources:
-        if search_properties is "names":
-            try:
-                resource_properties = waitForDeferred(resource.listProperties(request))
-                yield resource_properties
-                resource_properties = resource_properties.getResult()
-            except:
-                log.err("Unable to get properties for resource %r" % (resource,))
-                raise
-
+    if search_properties is "names":
+        results = {}
+        results[request.uri] = self.deadProperties().list()
+        
+        if depth == "1":
+            allowed_uris = set(resources)
+            child_results = self.deadProperties().listAll()
+            for key, value in child_results.iteritems():
+                uri = joinURL(request.uri, key)
+                if uri in allowed_uris:
+                    results[uri] = value
+ 
+        uris = results.keys()
+        uris.sort()
+        for uri in uris:
             properties_by_status = {
-                responsecode.OK: [propertyName(p) for p in resource_properties]
+                responsecode.OK: [propertyName(p) for p in results[uri]]
             }
-        else:
+            propstats = []
+    
+            for status in properties_by_status:
+                properties = properties_by_status[status]
+                if not properties: continue
+    
+                xml_status    = davxml.Status.fromResponseCode(status)
+                xml_container = davxml.PropertyContainer(*properties)
+                xml_propstat  = davxml.PropertyStatus(xml_container, xml_status)
+    
+                propstats.append(xml_propstat)
+    
+            xml_resource = davxml.HRef(uri)
+            if propstats:
+                xml_response = davxml.PropertyStatusResponse(xml_resource, *propstats)
+            else:
+                xml_response = davxml.StatusResponse(xml_resource, davxml.Status.fromResponseCode(responsecode.OK))
+    
+            xml_responses.append(xml_response)
+
+    elif search_properties is "all":
+        results = {}
+        results[request.uri] = self.deadProperties().getAll(nohidden=True)
+        
+        if depth == "1":
+            allowed_uris = set(resources)
+            child_results = self.deadProperties().getAllResources(nohidden=True)
+            for key, value in child_results.iteritems():
+                uri = joinURL(request.uri, key)
+                if uri in allowed_uris:
+                    results[uri] = value
+
+        uris = results.keys()
+        uris.sort()
+        for uri in uris:
             properties_by_status = {
-                responsecode.OK        : [],
-                responsecode.NOT_FOUND : [],
+                responsecode.OK: [p for p in results[uri].itervalues()]
             }
-
-            if search_properties is "all":
-                properties_to_enumerate = waitForDeferred(resource.listAllprop(request))
-                yield properties_to_enumerate
-                properties_to_enumerate = properties_to_enumerate.getResult()
+            propstats = []
+    
+            for status in properties_by_status:
+                properties = properties_by_status[status]
+                if not properties: continue
+    
+                xml_status    = davxml.Status.fromResponseCode(status)
+                xml_container = davxml.PropertyContainer(*properties)
+                xml_propstat  = davxml.PropertyStatus(xml_container, xml_status)
+    
+                propstats.append(xml_propstat)
+    
+            xml_resource = davxml.HRef(uri)
+            if propstats:
+                xml_response = davxml.PropertyStatusResponse(xml_resource, *propstats)
             else:
-                properties_to_enumerate = search_properties
+                xml_response = davxml.StatusResponse(xml_resource, davxml.Status.fromResponseCode(responsecode.OK))
+    
+            xml_responses.append(xml_response)
+    
+    else:
+        results = {}
+        results[request.uri] = self.deadProperties().getSeveral(search_properties)
+        
+        if depth == "1":
+            allowed_uris = set(resources)
+            child_results = self.deadProperties().getSeveralResources(search_properties)
+            for key, value in child_results.iteritems():
+                uri = joinURL(request.uri, key)
+                if uri in allowed_uris:
+                    results[uri] = value
 
-            for property in properties_to_enumerate:
-                has = waitForDeferred(resource.hasProperty(property, request))
-                yield has
-                has = has.getResult()
-                if has:
-                    try:
-                        resource_property = waitForDeferred(resource.readProperty(property, request))
-                        yield resource_property
-                        resource_property = resource_property.getResult()
-                    except:
-                        f = Failure()
-
-                        log.err("Error reading property %r for resource %s: %s" % (property, uri, f.value))
-
-                        status = statusForFailure(f, "getting property: %s" % (property,))
-                        if status not in properties_by_status:
-                            properties_by_status[status] = []
-                        properties_by_status[status].append(propertyName(property))
-                    else:
-                        properties_by_status[responsecode.OK].append(resource_property)
+        uris = results.keys()
+        uris.sort()
+        for uri in uris:
+            properties_by_status = {
+                 responsecode.OK        : [],
+                 responsecode.NOT_FOUND : [],
+             }
+            for prop in search_properties:
+                if results[uri].has_key(prop):
+                    properties_by_status[responsecode.OK].append(results[uri][prop])
                 else:
-                    properties_by_status[responsecode.NOT_FOUND].append(propertyName(property))
+                    properties_by_status[responsecode.NOT_FOUND].append(propertyName(prop))
+ 
+            propstats = []
+    
+            for status in properties_by_status:
+                properties = properties_by_status[status]
+                if not properties: continue
+    
+                xml_status    = davxml.Status.fromResponseCode(status)
+                xml_container = davxml.PropertyContainer(*properties)
+                xml_propstat  = davxml.PropertyStatus(xml_container, xml_status)
+    
+                propstats.append(xml_propstat)
+    
+            xml_resource = davxml.HRef(uri)
+            if propstats:
+                xml_response = davxml.PropertyStatusResponse(xml_resource, *propstats)
+            else:
+                xml_response = davxml.StatusResponse(xml_resource, davxml.Status.fromResponseCode(responsecode.OK))
+    
+            xml_responses.append(xml_response)
 
-        propstats = []
-
-        for status in properties_by_status:
-            properties = properties_by_status[status]
-            if not properties: continue
-
-            xml_status    = davxml.Status.fromResponseCode(status)
-            xml_container = davxml.PropertyContainer(*properties)
-            xml_propstat  = davxml.PropertyStatus(xml_container, xml_status)
-
-            propstats.append(xml_propstat)
-
-        xml_resource = davxml.HRef(uri)
-        xml_response = davxml.PropertyStatusResponse(xml_resource, *propstats)
-
-        xml_responses.append(xml_response)
-
     #
     # Return response
     #
@@ -200,7 +257,7 @@
 
 def propertyName(name):
     property_namespace, property_name = name
-    class PropertyName (davxml.WebDAVEmptyElement):
-        namespace = property_namespace
-        name = property_name
-    return PropertyName()
+    pname = davxml.WebDAVUnknownElement()
+    pname.namespace = property_namespace
+    pname.name = property_name
+    return pname
