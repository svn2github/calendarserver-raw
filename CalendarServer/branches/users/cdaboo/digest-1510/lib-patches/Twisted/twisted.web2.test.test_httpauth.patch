Index: twisted/web2/test/test_httpauth.py
===================================================================
--- twisted/web2/test/test_httpauth.py	(revision 19773)
+++ twisted/web2/test/test_httpauth.py	(working copy)
@@ -20,21 +20,13 @@
     def __init__(self, *args, **kwargs):
         super(FakeDigestCredentialFactory, self).__init__(*args, **kwargs)
 
-        self.privateKey = "0"
-
     def generateNonce(self):
         """
         Generate a static nonce
         """
         return '178288758716122392881254770685'
 
-    def _getTime(self):
-        """
-        Return a stable time
-        """
-        return 0
 
-
 class BasicAuthTestCase(unittest.TestCase):
     def setUp(self):
         self.credentialFactory = basic.BasicCredentialFactory('foo')
@@ -86,18 +78,17 @@
 challengeResponse = ('digest',
                      {'nonce': challengeNonce,
                       'qop': 'auth', 'realm': 'test realm',
-                      'algorithm': 'md5',
-                      'opaque': challengeOpaque})
+                      'algorithm': 'md5',})
 
 cnonce = "29fc54aa1641c6fa0e151419361c8f23"
 
 authRequest1 = ('username="username", realm="test realm", nonce="%s", '
-                'uri="/write/", response="%s", opaque="%s", algorithm="md5", '
+                'uri="/write/", response="%s", algorithm="md5", '
                 'cnonce="29fc54aa1641c6fa0e151419361c8f23", nc=00000001, '
                 'qop="auth"')
 
 authRequest2 = ('username="username", realm="test realm", nonce="%s", '
-                'uri="/write/", response="%s", opaque="%s", algorithm="md5", '
+                'uri="/write/", response="%s", algorithm="md5", '
                 'cnonce="29fc54aa1641c6fa0e151419361c8f23", nc=00000002, '
                 'qop="auth"')
 
@@ -147,7 +138,6 @@
         self.assertEquals(challenge['realm'], 'test realm')
         self.assertEquals(challenge['algorithm'], 'md5')
         self.assertTrue(challenge.has_key("nonce"))
-        self.assertTrue(challenge.has_key("opaque"))
 
     def test_response(self):
         """
@@ -159,7 +149,7 @@
         clientResponse = authRequest1 % (
             challenge['nonce'],
             self.getDigestResponse(challenge, "00000001"),
-            challenge['opaque'])
+        )
 
         creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
         self.failUnless(creds.checkPassword('password'))
@@ -175,7 +165,7 @@
         clientResponse = authRequest1 % (
             challenge['nonce'],
             self.getDigestResponse(challenge, "00000001"),
-            challenge['opaque'])
+        )
 
         creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
         self.failUnless(creds.checkPassword('password'))
@@ -183,7 +173,7 @@
         clientResponse = authRequest2 % (
             challenge['nonce'],
             self.getDigestResponse(challenge, "00000002"),
-            challenge['opaque'])
+        )
 
         creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
         self.failUnless(creds.checkPassword('password'))
@@ -199,7 +189,7 @@
         clientResponse = authRequest1 % (
             challenge['nonce'],
             self.getDigestResponse(challenge, "00000001"),
-            challenge['opaque'])
+        )
 
         creds = self.credentialFactory.decode(clientResponse,
                                               SimpleRequest(None, 'POST', '/'))
@@ -236,17 +226,6 @@
                               _trivial_GET)
         self.assertEquals(str(e), "Invalid response, no nonce given.")
 
-    def test_noOpaque(self):
-        """
-        Test that login fails when our response does not contain a nonce
-        """
-
-        e = self.assertRaises(error.LoginFailed,
-                              self.credentialFactory.decode,
-                              'realm="Test",username="Foo"',
-                              _trivial_GET)
-        self.assertEquals(str(e), "Invalid response, no opaque given.")
-
     def test_checkHash(self):
         """
         Check that given a hash of the form 'username:realm:password'
@@ -258,7 +237,7 @@
         clientResponse = authRequest1 % (
             challenge['nonce'],
             self.getDigestResponse(challenge, "00000001"),
-            challenge['opaque'])
+        )
 
         creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
 
@@ -268,41 +247,36 @@
         self.failIf(creds.checkHash(
                 md5.md5('username:test realm:bogus').hexdigest()))
 
-    def test_invalidOpaque(self):
+    def test_invalidNonceCount(self):
         """
-        Test that login fails when the opaque does not contain all the required
-        parts.
+        Test that login fails when the nonce-count is repeated.
         """
 
         credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
 
         challenge = credentialFactory.getChallenge(clientAddress)
 
-        self.assertRaises(
-            error.LoginFailed,
-            credentialFactory.verifyOpaque,
-            'badOpaque',
+        clientResponse1 = authRequest1 % (
             challenge['nonce'],
-            clientAddress.host)
+            self.getDigestResponse(challenge, "00000001"),
+        )
 
-        badOpaque = ('foo-%s' % (
-                'nonce,clientip'.encode('base64').strip('\n'),))
-
-        self.assertRaises(
-            error.LoginFailed,
-            credentialFactory.verifyOpaque,
-            badOpaque,
+        clientResponse2 = authRequest2 % (
             challenge['nonce'],
-            clientAddress.host)
+            self.getDigestResponse(challenge, "00000002"),
+        )
 
+        credentialFactory.decode(clientResponse1, _trivial_GET)
+        credentialFactory.decode(clientResponse2, _trivial_GET)
+
         self.assertRaises(
             error.LoginFailed,
-            credentialFactory.verifyOpaque,
-            '',
-            challenge['nonce'],
-            clientAddress.host)
+            self.credentialFactory.decode,
+            clientResponse2,
+            _trivial_GET
+        )
 
-    def test_incompatibleNonce(self):
+    def test_invalidNonce(self):
         """
         Test that login fails when the given nonce from the response, does not
         match the nonce encoded in the opaque.
@@ -311,24 +285,19 @@
         credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
 
         challenge = credentialFactory.getChallenge(clientAddress)
+        challenge['nonce'] = "noNoncense"
 
-        badNonceOpaque = credentialFactory.generateOpaque(
-            '1234567890',
-            clientAddress.host)
-
-        self.assertRaises(
-            error.LoginFailed,
-            credentialFactory.verifyOpaque,
-            badNonceOpaque,
+        clientResponse = authRequest1 % (
             challenge['nonce'],
-            clientAddress.host)
+            self.getDigestResponse(challenge, "00000001"),
+        )
 
         self.assertRaises(
             error.LoginFailed,
-            credentialFactory.verifyOpaque,
-            badNonceOpaque,
-            '',
-            clientAddress.host)
+            credentialFactory.decode,
+            clientResponse,
+            _trivial_GET
+        )
 
     def test_incompatibleClientIp(self):
         """
@@ -338,18 +307,19 @@
 
         credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
 
-        challenge = credentialFactory.getChallenge(clientAddress)
+        challenge = credentialFactory.getChallenge(address.IPv4Address('TCP', '127.0.0.2', 80))
 
-        badNonceOpaque = credentialFactory.generateOpaque(
+        clientResponse = authRequest1 % (
             challenge['nonce'],
-            '10.0.0.1')
+            self.getDigestResponse(challenge, "00000001"),
+        )
 
         self.assertRaises(
             error.LoginFailed,
-            credentialFactory.verifyOpaque,
-            badNonceOpaque,
-            challenge['nonce'],
-            clientAddress.host)
+            credentialFactory.decode,
+            clientResponse,
+            _trivial_GET
+        )
 
     def test_oldNonce(self):
         """
@@ -360,47 +330,20 @@
         credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
 
         challenge = credentialFactory.getChallenge(clientAddress)
+        clientip, nonce_count, timestamp = credentialFactory.db.get(challenge['nonce'])
+        credentialFactory.db.set(challenge['nonce'], (clientip, nonce_count, timestamp - 2 * digest.DigestCredentialFactory.CHALLENGE_LIFETIME_SECS))
 
-        key = '%s,%s,%s' % (challenge['nonce'],
-                            clientAddress.host,
-                            '-137876876')
-        digest = md5.new(key + credentialFactory.privateKey).hexdigest()
-        ekey = key.encode('base64')
-
-        oldNonceOpaque = '%s-%s' % (digest, ekey.strip('\n'))
-
-        self.assertRaises(
-            error.LoginFailed,
-            credentialFactory.verifyOpaque,
-            oldNonceOpaque,
+        clientResponse = authRequest1 % (
             challenge['nonce'],
-            clientAddress.host)
+            self.getDigestResponse(challenge, "00000001"),
+        )
 
-    def test_mismatchedOpaqueChecksum(self):
-        """
-        Test that login fails when the opaque checksum fails verification
-        """
-
-        credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
-
-        challenge = credentialFactory.getChallenge(clientAddress)
-
-
-        key = '%s,%s,%s' % (challenge['nonce'],
-                            clientAddress.host,
-                            '0')
-
-        digest = md5.new(key + 'this is not the right pkey').hexdigest()
-
-        badChecksum = '%s-%s' % (digest,
-                                 key.encode('base64').strip('\n'))
-
         self.assertRaises(
             error.LoginFailed,
-            credentialFactory.verifyOpaque,
-            badChecksum,
-            challenge['nonce'],
-            clientAddress.host)
+            credentialFactory.decode,
+            clientResponse,
+            _trivial_GET
+        )
 
     def test_incompatibleCalcHA1Options(self):
         """
