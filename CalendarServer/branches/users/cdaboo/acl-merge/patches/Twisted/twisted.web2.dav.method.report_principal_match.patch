Index: twisted/web2/dav/method/report_principal_match.py
===================================================================
--- twisted/web2/dav/method/report_principal_match.py	(revision 17951)
+++ twisted/web2/dav/method/report_principal_match.py	(working copy)
@@ -56,8 +56,7 @@
     depth = request.headers.getHeader("depth", "0")
     if depth != "0":
         log.err("Non-zero depth is not allowed: %s" % (depth,))
-        yield StatusResponse(responsecode.BAD_REQUEST, "Depth %s not allowed" % (depth,))
-        return
+        raise HTTPError(StatusResponse(responsecode.BAD_REQUEST, "Depth %s not allowed" % (depth,)))
     
     # Get a single DAV:prop element from the REPORT request body
     propertiesForResource = None
@@ -94,7 +93,12 @@
         if lookForPrincipals:
             selfPrincipal = self.currentPrincipal(request).children[0]
 
-            for child, uri in self.findChildrenWithPrivileges("infinity", (davxml.Read(),), request):
+            children = []
+            d = waitForDeferred(self.findChildren("infinity", request, lambda x, y: children.append((x,y)), privileges=(davxml.Read(),)))
+            yield d
+            d.getResult()
+
+            for child, uri in children:
                 if isPrincipalResource(child) and child.principalMatch(selfPrincipal):
                     # Check size of results is within limit
                     matchcount += 1
@@ -101,21 +105,30 @@
                     if matchcount > max_number_of_matches:
                         raise NumberOfMatchesWithinLimits
 
-                    prop_common.responseForHref(
+                    d = waitForDeferred(prop_common.responseForHref(
                         request,
                         responses,
-                        davxml.HRef.fromString(joinURL(request.uri, uri)),
+                        davxml.HRef.fromString(uri),
                         child,
                         propertiesForResource,
                         propElement
-                    )
+                    ))
+                    yield d
+                    d.getResult()
         else:
             selfPrincipal = self.currentPrincipal(request).children[0]
 
-            for child, uri in self.findChildrenWithPrivileges("infinity", (davxml.Read(),), request):
+            children = []
+            d = waitForDeferred(self.findChildren("infinity", request, lambda x, y: children.append((x,y)), privileges=(davxml.Read(),)))
+            yield d
+            d.getResult()
+
+            for child, uri in children:
                 # Try to read the requested property from this resource
                 try:
-                    prop = child.readProperty(principalPropElement.qname(), request)
+                    prop = waitForDeferred(child.readProperty(principalPropElement.qname(), request))
+                    yield prop
+                    prop = prop.getResult()
                     if prop: prop.removeWhitespaceNodes()
 
                     if prop and len(prop.children) == 1 and isinstance(prop.children[0], davxml.HRef):
@@ -120,7 +133,7 @@
 
                     if prop and len(prop.children) == 1 and isinstance(prop.children[0], davxml.HRef):
                         # Find principal associated with this property and test it
-                        principal = waitForDeferred(self.locateResource(str(prop.children[0])))
+                        principal = waitForDeferred(request.locateResource(str(prop.children[0])))
                         yield principal
                         principal = principal.getResult()
 
@@ -130,14 +143,16 @@
                             if matchcount > max_number_of_matches:
                                 raise NumberOfMatchesWithinLimits
 
-                            prop_common.responseForHref(
+                            d = waitForDeferred(prop_common.responseForHref(
                                 request,
                                 responses,
-                                davxml.HRef.fromString(joinURL(request.uri, uri)),
+                                davxml.HRef.fromString(uri),
                                 child,
                                 propertiesForResource,
                                 propElement
-                            )
+                            ))
+                            yield d
+                            d.getResult()
                 except HTTPError:
                     # Just ignore a failure to access the property. We treat this like a property that does not exist
                     # or does not match the principal.
