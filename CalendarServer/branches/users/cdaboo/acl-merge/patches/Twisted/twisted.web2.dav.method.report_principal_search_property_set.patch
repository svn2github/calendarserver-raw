Index: twisted/web2/dav/method/report_principal_search_property_set.py
===================================================================
--- twisted/web2/dav/method/report_principal_search_property_set.py	(revision 17951)
+++ twisted/web2/dav/method/report_principal_search_property_set.py	(working copy)
@@ -29,11 +29,11 @@
 
 __all__ = ["report_DAV__principal_search_property_set"]
 
+from twisted.internet.defer import deferredGenerator
 from twisted.python import log
 from twisted.web2 import responsecode
 from twisted.web2.dav import davxml
-from twisted.web2.http import Response
-from twisted.web2.http import StatusResponse
+from twisted.web2.http import HTTPError, Response, StatusResponse
 from twisted.web2.stream import MemoryStream
 
 def report_DAV__principal_search_property_set(self, request, principal_search_property_set):
@@ -49,7 +49,7 @@
     depth = request.headers.getHeader("depth", "0")
     if depth != "0":
         log.err("Error in principal-search-property-set REPORT, Depth set to %s" % (depth,))
-        return StatusResponse(responsecode.BAD_REQUEST, "Depth %s not allowed" % (depth,))
+        raise HTTPError(StatusResponse(responsecode.BAD_REQUEST, "Depth %s not allowed" % (depth,)))
     
     # Get details from the resource
     result = self.principalSearchPropertySet()
@@ -55,6 +55,8 @@
     result = self.principalSearchPropertySet()
     if result is None:
         log.err("Error in principal-search-property-set REPORT not supported on: %s" % (self,))
-        return StatusResponse(responsecode.BAD_REQUEST, "Not allowed on this resource")
+        raise HTTPError(StatusResponse(responsecode.BAD_REQUEST, "Not allowed on this resource"))
         
-    return Response(code=responsecode.OK, stream=MemoryStream(result.toxml()))
+    yield Response(code=responsecode.OK, stream=MemoryStream(result.toxml()))
+
+report_DAV__principal_search_property_set = deferredGenerator(report_DAV__principal_search_property_set)
