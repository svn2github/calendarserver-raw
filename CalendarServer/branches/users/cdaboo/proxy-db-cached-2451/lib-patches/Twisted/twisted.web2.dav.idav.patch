Index: twisted/web2/dav/idav.py
===================================================================
--- twisted/web2/dav/idav.py	(revision 19773)
+++ twisted/web2/dav/idav.py	(working copy)
@@ -41,7 +41,7 @@
             otherwise.
         """
 
-    def findChildren(depth, request, callback, privileges):
+    def findChildren(depth, request, callback, privileges, inherited_aces):
         """
         Returns an iterable of child resources for the given depth.
         Because resources do not know their request URIs, chidren are returned
@@ -52,6 +52,8 @@
         @param callback: C{callable} that will be called for each child found
         @param privileges: the list of L{Privilege}s to test for.  This should 
             default to None.
+        @param inherited_aces: a list of L{Privilege}s for aces being inherited from
+            the parent collection used to bypass inheritance lookup.
         @return: An L{Deferred} that fires when all the children have been found
         """
 
@@ -125,15 +127,10 @@
             L{responsecode.UNAUTHORIZED}) if not authorized.
         """
 
-    def principalCollections(request):
+    def principalCollections():
         """
-        Provides the DAV:HRef's of collection resources which contain principal
-        resources which may be used in access control entries on this resource.
-        (RFC 3744, section 5.8)
-        @param request: the request being processed.
-        @return: a deferred sequence of L{davxml.HRef}s referring to
-            collection resources which implement the
-            C{DAV:principal-property-search} C{REPORT}.
+        @return: an interable of L{IDAVPrincipalCollectionResource}s which
+            contain principals used in ACLs for this resource.
         """
 
     def setAccessControlList(acl):
@@ -180,6 +177,80 @@
             the specified principal.
         """
 
+    ##
+    # Quota
+    ##
+    
+    def quota(request):
+        """
+        Get current available & used quota values for this resource's quota root
+        collection.
+
+        @return: a C{tuple} containing two C{int}'s the first is 
+            quota-available-bytes, the second is quota-used-bytes, or
+            C{None} if quota is not defined on the resource.
+        """
+    
+    def hasQuota(request):
+        """
+        Check whether this resource is undre quota control by checking each parent to see if
+        it has a quota root.
+        
+        @return: C{True} if under quota control, C{False} if not.
+        """
+        
+    def hasQuotaRoot(request):
+        """
+        Determine whether the resource has a quota root.
+
+        @return: a C{True} if this resource has quota root, C{False} otherwise.
+        """
+    
+
+    def quotaRoot(request):
+        """
+        Get the quota root (max. allowed bytes) value for this collection.
+
+        @return: a C{int} containing the maximum allowed bytes if this collection
+            is quota-controlled, or C{None} if not quota controlled.
+        """
+    
+    def setQuotaRoot(request, maxsize):
+        """
+        Set the quota root (max. allowed bytes) value for this collection.
+
+        @param maxsize: a C{int} containing the maximum allowed bytes for the contents
+            of this collection.
+        """
+    
+    def quotaSize(request):
+        """
+        Get the size of this resource (if its a collection get total for all children as well).
+        TODO: Take into account size of dead-properties.
+
+        @return: a L{Deferred} with a C{int} result containing the size of the resource.
+        """
+        
+    def currentQuotaUse(request):
+        """
+        Get the cached quota use value, or if not present (or invalid) determine
+        quota use by brute force.
+
+        @return: an L{Deferred} with a C{int} result containing the current used byte count if
+            this collection is quota-controlled, or C{None} if not quota controlled.
+        """
+        
+    def updateQuotaUse(request, adjust):
+        """
+        Adjust current quota use on this all all parent collections that also
+        have quota roots.
+
+        @param adjust: a C{int} containing the number of bytes added (positive) or
+        removed (negative) that should be used to adjust the cached total.
+        @return: an L{Deferred} with a C{int} result containing the current used byte if this collection
+            is quota-controlled, or C{None} if not quota controlled.
+        """
+
 class IDAVPrincipalResource (IDAVResource):
     """
     WebDAV principal resource.  (RFC 3744, section 2)
@@ -203,12 +274,23 @@
         """
         Provides the principal URLs of principals that are direct members of
         this (group) principal.  (RFC 3744, section 4.3)
-        @return: a iterable of principal URLs.
+        @return: a deferred returning an iterable of principal URLs.
         """
 
     def groupMemberships():
         """
         Provides the URLs of the group principals in which the principal is
         directly a member.  (RFC 3744, section 4.4)
-        @return: a iterable of group principal URLs.
+        @return: a deferred containing an iterable of group principal URLs.
         """
+
+class IDAVPrincipalCollectionResource (IDAVResource):
+    """
+    WebDAV principal collection resource.  (RFC 3744, section 5.8)
+    """
+    def principalCollectionURL():
+        """
+        Provides a URL for this resource which may be used to identify this
+        resource in ACL requests.  (RFC 3744, section 5.8)
+        @return: a URL.
+        """
