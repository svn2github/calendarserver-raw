Index: twisted/web2/test/test_httpauth.py
===================================================================
--- twisted/web2/test/test_httpauth.py	(revision 19773)
+++ twisted/web2/test/test_httpauth.py	(working copy)
@@ -1,3 +1,4 @@
+from twisted.internet.defer import inlineCallbacks
 import md5
 from twisted.internet import address
 from twisted.trial import unittest
@@ -41,22 +42,25 @@
         self.username = 'dreid'
         self.password = 'S3CuR1Ty'
 
+    @inlineCallbacks
     def testUsernamePassword(self):
         response = base64.encodestring('%s:%s' % (
                 self.username,
                 self.password))
 
-        creds = self.credentialFactory.decode(response, _trivial_GET)
+        creds = (yield self.credentialFactory.decode(response, _trivial_GET))
         self.failUnless(creds.checkPassword(self.password))
 
+    @inlineCallbacks
     def testIncorrectPassword(self):
         response = base64.encodestring('%s:%s' % (
                 self.username,
                 'incorrectPassword'))
 
-        creds = self.credentialFactory.decode(response, _trivial_GET)
+        creds = (yield self.credentialFactory.decode(response, _trivial_GET))
         self.failIf(creds.checkPassword(self.password))
 
+    @inlineCallbacks
     def testIncorrectPadding(self):
         response = base64.encodestring('%s:%s' % (
                 self.username,
@@ -64,7 +68,7 @@
 
         response = response.strip('=')
 
-        creds = self.credentialFactory.decode(response, _trivial_GET)
+        creds = (yield self.credentialFactory.decode(response, _trivial_GET))
         self.failUnless(creds.checkPassword(self.password))
 
     def testInvalidCredentials(self):
@@ -135,6 +139,7 @@
             )
         return expected
 
+    @inlineCallbacks
     def test_getChallenge(self):
         """
         Test that all the required fields exist in the challenge,
@@ -142,42 +147,44 @@
         DigestCredentialFactory
         """
 
-        challenge = self.credentialFactory.getChallenge(clientAddress)
+        challenge = (yield self.credentialFactory.getChallenge(clientAddress))
         self.assertEquals(challenge['qop'], 'auth')
         self.assertEquals(challenge['realm'], 'test realm')
         self.assertEquals(challenge['algorithm'], 'md5')
         self.assertTrue(challenge.has_key("nonce"))
         self.assertTrue(challenge.has_key("opaque"))
 
+    @inlineCallbacks
     def test_response(self):
         """
         Test that we can decode a valid response to our challenge
         """
 
-        challenge = self.credentialFactory.getChallenge(clientAddress)
+        challenge = (yield self.credentialFactory.getChallenge(clientAddress))
 
         clientResponse = authRequest1 % (
             challenge['nonce'],
             self.getDigestResponse(challenge, "00000001"),
             challenge['opaque'])
 
-        creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
+        creds = (yield self.credentialFactory.decode(clientResponse, _trivial_GET))
         self.failUnless(creds.checkPassword('password'))
 
+    @inlineCallbacks
     def test_multiResponse(self):
         """
         Test that multiple responses to to a single challenge are handled
         successfully.
         """
 
-        challenge = self.credentialFactory.getChallenge(clientAddress)
+        challenge = (yield self.credentialFactory.getChallenge(clientAddress))
 
         clientResponse = authRequest1 % (
             challenge['nonce'],
             self.getDigestResponse(challenge, "00000001"),
             challenge['opaque'])
 
-        creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
+        creds = (yield self.credentialFactory.decode(clientResponse, _trivial_GET))
         self.failUnless(creds.checkPassword('password'))
 
         clientResponse = authRequest2 % (
@@ -185,24 +192,25 @@
             self.getDigestResponse(challenge, "00000002"),
             challenge['opaque'])
 
-        creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
+        creds = (yield self.credentialFactory.decode(clientResponse, _trivial_GET))
         self.failUnless(creds.checkPassword('password'))
 
+    @inlineCallbacks
     def test_failsWithDifferentMethod(self):
         """
         Test that the response fails if made for a different request method
         than it is being issued for.
         """
 
-        challenge = self.credentialFactory.getChallenge(clientAddress)
+        challenge = (yield self.credentialFactory.getChallenge(clientAddress))
 
         clientResponse = authRequest1 % (
             challenge['nonce'],
             self.getDigestResponse(challenge, "00000001"),
             challenge['opaque'])
 
-        creds = self.credentialFactory.decode(clientResponse,
-                                              SimpleRequest(None, 'POST', '/'))
+        creds = (yield self.credentialFactory.decode(clientResponse,
+                                              SimpleRequest(None, 'POST', '/')))
         self.failIf(creds.checkPassword('password'))
 
     def test_noUsername(self):
@@ -247,20 +255,21 @@
                               _trivial_GET)
         self.assertEquals(str(e), "Invalid response, no opaque given.")
 
+    @inlineCallbacks
     def test_checkHash(self):
         """
         Check that given a hash of the form 'username:realm:password'
         we can verify the digest challenge
         """
 
-        challenge = self.credentialFactory.getChallenge(clientAddress)
+        challenge = (yield self.credentialFactory.getChallenge(clientAddress))
 
         clientResponse = authRequest1 % (
             challenge['nonce'],
             self.getDigestResponse(challenge, "00000001"),
             challenge['opaque'])
 
-        creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
+        creds = (yield self.credentialFactory.decode(clientResponse, _trivial_GET))
 
         self.failUnless(creds.checkHash(
                 md5.md5('username:test realm:password').hexdigest()))
@@ -268,6 +277,7 @@
         self.failIf(creds.checkHash(
                 md5.md5('username:test realm:bogus').hexdigest()))
 
+    @inlineCallbacks
     def test_invalidOpaque(self):
         """
         Test that login fails when the opaque does not contain all the required
@@ -276,7 +286,7 @@
 
         credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
 
-        challenge = credentialFactory.getChallenge(clientAddress)
+        challenge = (yield credentialFactory.getChallenge(clientAddress))
 
         self.assertRaises(
             error.LoginFailed,
@@ -302,6 +312,7 @@
             challenge['nonce'],
             clientAddress.host)
 
+    @inlineCallbacks
     def test_incompatibleNonce(self):
         """
         Test that login fails when the given nonce from the response, does not
@@ -310,7 +321,7 @@
 
         credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
 
-        challenge = credentialFactory.getChallenge(clientAddress)
+        challenge = (yield credentialFactory.getChallenge(clientAddress))
 
         badNonceOpaque = credentialFactory.generateOpaque(
             '1234567890',
@@ -330,6 +341,7 @@
             '',
             clientAddress.host)
 
+    @inlineCallbacks
     def test_incompatibleClientIp(self):
         """
         Test that the login fails when the request comes from a client ip
@@ -338,7 +350,7 @@
 
         credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
 
-        challenge = credentialFactory.getChallenge(clientAddress)
+        challenge = (yield credentialFactory.getChallenge(clientAddress))
 
         badNonceOpaque = credentialFactory.generateOpaque(
             challenge['nonce'],
@@ -351,6 +363,7 @@
             challenge['nonce'],
             clientAddress.host)
 
+    @inlineCallbacks
     def test_oldNonce(self):
         """
         Test that the login fails when the given opaque is older than
@@ -359,7 +372,7 @@
 
         credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
 
-        challenge = credentialFactory.getChallenge(clientAddress)
+        challenge = (yield credentialFactory.getChallenge(clientAddress))
 
         key = '%s,%s,%s' % (challenge['nonce'],
                             clientAddress.host,
@@ -376,6 +389,7 @@
             challenge['nonce'],
             clientAddress.host)
 
+    @inlineCallbacks
     def test_mismatchedOpaqueChecksum(self):
         """
         Test that login fails when the opaque checksum fails verification
@@ -383,7 +397,7 @@
 
         credentialFactory = FakeDigestCredentialFactory('md5', 'test realm')
 
-        challenge = credentialFactory.getChallenge(clientAddress)
+        challenge = (yield credentialFactory.getChallenge(clientAddress))
 
 
         key = '%s,%s,%s' % (challenge['nonce'],
