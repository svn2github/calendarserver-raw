Index: twisted/web2/dav/test/test_prop.py
===================================================================
--- twisted/web2/dav/test/test_prop.py	(revision 19773)
+++ twisted/web2/dav/test/test_prop.py	(working copy)
@@ -21,6 +21,8 @@
 #
 # DRI: Wilfredo Sanchez, wsanchez@apple.com
 ##
+from twisted.web2.dav.element.rfc4331 import QuotaUsedBytes
+from twisted.web2.dav.element.rfc4331 import QuotaAvailableBytes
 
 import random
 
@@ -37,8 +39,13 @@
 from twisted.web2.dav.test.util import serialize
 import twisted.web2.dav.test.util
 
-live_properties = [lookupElement(qname)() for qname in DAVResource.liveProperties if qname[0] == dav_namespace]
+# Remove dynamic live properties that exist
+dynamicLiveProperties = (
+    (dav_namespace, "quota-available-bytes"     ),
+    (dav_namespace, "quota-used-bytes"          ),
+)
 
+
 #
 # See whether dead properties are available
 #
@@ -49,6 +56,10 @@
     """
     PROPFIND, PROPPATCH requests
     """
+
+    def liveProperties(self):
+        return [lookupElement(qname)() for qname in self.resource_class.liveProperties if (qname[0] == dav_namespace) and qname not in dynamicLiveProperties]
+
     def test_PROPFIND_basic(self):
         """
         PROPFIND request
@@ -85,7 +96,7 @@
                             self.fail("PROPFIND failed (status %s) to locate live properties: %s"
                                       % (status.code, properties))
 
-                        properties_to_find = [p.qname() for p in live_properties]
+                        properties_to_find = [p.qname() for p in self.liveProperties()]
 
                         for property in properties:
                             qname = property.qname()
@@ -102,7 +113,7 @@
             else:
                 self.fail("No response for URI /")
 
-        query = davxml.PropertyFind(davxml.PropertyContainer(*live_properties))
+        query = davxml.PropertyFind(davxml.PropertyContainer(*self.liveProperties()))
 
         request = SimpleRequest(self.site, "PROPFIND", "/")
 
@@ -146,9 +157,9 @@
                               % (status.code, properties))
 
                 if which.name == "allprop":
-                    properties_to_find = [p.qname() for p in live_properties if not p.hidden]
+                    properties_to_find = [p.qname() for p in self.liveProperties() if not p.hidden]
                 else:
-                    properties_to_find = [p.qname() for p in live_properties]
+                    properties_to_find = [p.qname() for p in self.liveProperties()]
 
                 for property in properties:
                     qname = property.qname()
