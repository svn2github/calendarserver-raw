Index: twisted/web2/test/test_httpauth.py
===================================================================
--- twisted/web2/test/test_httpauth.py	(revision 18545)
+++ twisted/web2/test/test_httpauth.py	(working copy)
@@ -1,3 +1,6 @@
+import md5
+import time
+from twisted.internet import address
 from twisted.trial import unittest
 from twisted.internet import defer
 from twisted.cred import error
@@ -12,8 +15,13 @@
     def generateNonce(self):
         return '178288758716122392881254770685'
 
-    def generateOpaque(self):
-        return '1041524039'
+    def generateOpaque(self, nonce, clientip):
+        # Now, what we do is encode the nonce, client ip and a timestamp in the opaque value
+        # with a suitable digest
+        key = "%s,%s,%s" % (nonce, clientip, str(int(0)))
+        digest = md5.new(key + "0").hexdigest()
+        ekey = key.encode('base64')
+        return "%s-%s" % (digest, ekey.replace('\n', ''),)
 
 class BasicAuthTestCase(unittest.TestCase):
     def setUp(self):
@@ -56,32 +64,63 @@
 
 challengeResponse = ('digest', {'nonce': '178288758716122392881254770685', 
                                 'qop': 'auth', 'realm': 'test realm', 
-                                'algorithm': 'md5', 'opaque': '1041524039'})
+                                'algorithm': 'md5',
+                                'opaque': '75c4bd95b96b7b7341c646c6502f0833-MTc4Mjg4NzU4NzE2MTIyMzkyODgxMjU0NzcwNjg1LHJlbW90ZWhvc3QsMA=='})
 
-authRequest = 'username="username", realm="test realm", nonce="178288758716122392881254770685", uri="/write/", response="62f388be1cf678fbdfce87910871bcc5", opaque="1041524039", algorithm="md5", cnonce="29fc54aa1641c6fa0e151419361c8f23", nc=00000001, qop="auth"'
+cnonce = "29fc54aa1641c6fa0e151419361c8f23"
 
+authRequest1 = 'username="username", realm="test realm", nonce="%s", uri="/write/", response="%s", opaque="%s", algorithm="md5", cnonce="29fc54aa1641c6fa0e151419361c8f23", nc=00000001, qop="auth"'
+authRequest2 = 'username="username", realm="test realm", nonce="%s", uri="/write/", response="%s", opaque="%s", algorithm="md5", cnonce="29fc54aa1641c6fa0e151419361c8f23", nc=00000002, qop="auth"'
+
 namelessAuthRequest = 'realm="test realm",nonce="doesn\'t matter"'
 
 class DigestAuthTestCase(unittest.TestCase):
     def setUp(self):
-        self.credentialFactory = FakeDigestCredentialFactory('md5', 
+        self.credentialFactory = digest.DigestCredentialFactory('md5', 
                                                              'test realm')
 
+    def getDigestResponse(self, challenge, ncount):
+        nonce = challenge.get('nonce')
+        algo = challenge.get('algorithm').lower()
+        qop = challenge.get('qop')
+        
+        expected = digest.calcResponse(
+            digest.calcHA1(algo, "username", "test realm", "password", nonce, cnonce),
+            algo, nonce, ncount, cnonce, qop, "GET", "/write/", None
+        )
+        return expected
+
     def testGetChallenge(self):
-        self.assertEquals(
-            self.credentialFactory.getChallenge(None),
-            challengeResponse[1])
+        challenge = self.credentialFactory.getChallenge(address.IPv4Address('TCP', "127.0.0.1", 80))
+        self.assertEquals(challenge['qop'], 'auth')
+        self.assertEquals(challenge['realm'], 'test realm')
+        self.assertEquals(challenge['algorithm'], 'md5')
+        self.assertTrue(challenge.has_key("nonce"))
+        self.assertTrue(challenge.has_key("opaque"))
 
     def testResponse(self):
-        challenge = self.credentialFactory.getChallenge(None)
+        challenge = self.credentialFactory.getChallenge(address.IPv4Address('TCP', "127.0.0.1", 80))
 
-        creds = self.credentialFactory.decode(authRequest, _trivial_GET)
+        clientResponse = authRequest1 % (challenge['nonce'], self.getDigestResponse(challenge, "00000001"), challenge['opaque'])
+        creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
         self.failUnless(creds.checkPassword('password'))
 
+    def testMultiResponse(self):
+        challenge = self.credentialFactory.getChallenge(address.IPv4Address('TCP', "127.0.0.1", 80))
+
+        clientResponse = authRequest1 % (challenge['nonce'], self.getDigestResponse(challenge, "00000001"), challenge['opaque'])
+        creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
+        self.failUnless(creds.checkPassword('password'))
+
+        clientResponse = authRequest2 % (challenge['nonce'], self.getDigestResponse(challenge, "00000002"), challenge['opaque'])
+        creds = self.credentialFactory.decode(clientResponse, _trivial_GET)
+        self.failUnless(creds.checkPassword('password'))
+
     def testFailsWithDifferentMethod(self):
-        challenge = self.credentialFactory.getChallenge(None)
+        challenge = self.credentialFactory.getChallenge(address.IPv4Address('TCP', "127.0.0.1", 80))
         
-        creds = self.credentialFactory.decode(authRequest, SimpleRequest(None, 'POST', '/'))
+        clientResponse = authRequest1 % (challenge['nonce'], self.getDigestResponse(challenge, "00000001"), challenge['opaque'])
+        creds = self.credentialFactory.decode(clientResponse, SimpleRequest(None, 'POST', '/'))
         self.failIf(creds.checkPassword('password'))
 
     def testNoUsername(self):
@@ -221,7 +260,7 @@
 
         def respond(ign):
             d = self.assertResponse((root, 'http://localhost/',
-                                     {'authorization': authRequest}),
+                                     {'authorization': authRequest1}),
                                     (200,
                                      {},
                                      None))
