Index: twisted/web2/static.py
===================================================================
--- twisted/web2/static.py	(revision 27622)
+++ twisted/web2/static.py	(working copy)
@@ -7,7 +7,7 @@
 """
 
 # System Imports
-import os, time, stat
+import os, time
 import tempfile
 
 # Sibling Imports
@@ -16,7 +16,7 @@
 
 # Twisted Imports
 from twisted.python import filepath
-from twisted.internet.defer import maybeDeferred
+from twisted.internet.defer import maybeDeferred, succeed, deferredGenerator, waitForDeferred, returnValue, inlineCallbacks
 from zope.interface import implements
 
 class MetaDataMixin(object):
@@ -28,7 +28,7 @@
         """
         @return: The current etag for the resource if available, None otherwise.
         """
-        return None
+        return succeed(None)
 
     def lastModified(self):
         """
@@ -64,7 +64,7 @@
         """
         @return: The display name of the resource if available, None otherwise.
         """
-        return None
+        return succeed(None)
 
     def exists(self):
         """
@@ -76,18 +76,26 @@
     def checkPreconditions(self, request):
         # This code replaces the code in resource.RenderMixin
         if request.method not in ("GET", "HEAD"):
+            etag = waitForDeferred(self.etag())
+            yield etag
+            etag = etag.getResult()
             http.checkPreconditions(
                 request,
                 entityExists = self.exists(),
-                etag = self.etag(),
+                etag = etag,
                 lastModified = self.lastModified(),
             )
 
         # Check per-method preconditions
         method = getattr(self, "preconditions_" + request.method, None)
         if method:
-            return method(request)
+            result = waitForDeferred(method(request))
+            yield result
+            result = result.getResult()
+            yield result
 
+    checkPreconditions = deferredGenerator(checkPreconditions)
+
     def renderHTTP(self, request):
         """
         See L{resource.RenderMixIn.renderHTTP}.
@@ -100,16 +108,23 @@
 
             # Don't provide additional resource information to error responses
             if response.code < 400:
-                # Content-* headers refer to the response content, not
-                # (necessarily) to the resource content, so they depend on the
-                # request method, and therefore can't be set here.
-                for (header, value) in (
-                    ("etag", self.etag()),
-                    ("last-modified", self.lastModified()),
-                ):
-                    if value is not None:
-                        response.headers.setHeader(header, value)
+                d = self.etag()
+                def _gotEtag(etag):
+                    # Content-* headers refer to the response content, not
+                    # (necessarily) to the resource content, so they depend on the
+                    # request method, and therefore can't be set here.
+                    for (header, value) in (
+                        ("etag", etag),
+                        ("last-modified", self.lastModified()),
+                    ):
+                        if value is not None:
+                            response.headers.setHeader(header, value)
 
+                    return response
+
+                d.addCallback(_gotEtag)
+                return d
+
             return response
 
         def onError(f):
@@ -132,8 +147,8 @@
 
     def etag(self):
         lastModified = self.lastModified()
-        return http_headers.ETag("%X-%X" % (lastModified, hash(self.data)),
-                                 weak=(time.time() - lastModified <= 1))
+        return succeed(http_headers.ETag("%X-%X" % (lastModified, hash(self.data)),
+                                 weak=(time.time() - lastModified <= 1)))
 
     def lastModified(self):
         return self.creationDate()
@@ -224,7 +239,7 @@
         return self.fp.exists()
 
     def etag(self):
-        if not self.fp.exists(): return None
+        if not self.fp.exists(): return succeed(None)
 
         st = self.fp.getstatinfo()
 
@@ -235,10 +250,10 @@
         #
         weak = (time.time() - st.st_mtime <= 1)
 
-        return http_headers.ETag(
+        return succeed(http_headers.ETag(
             "%X-%X-%X" % (st.st_ino, st.st_size, st.st_mtime),
             weak=weak
-        )
+        ))
 
     def lastModified(self):
         if self.fp.exists():
@@ -285,10 +300,11 @@
         return self._encoding
 
     def displayName(self):
+        self.fp.changed()       # XXX HACK
         if self.fp.exists():
-            return self.fp.basename()
+            return succeed(self.fp.basename())
         else:
-            return None
+            return succeed(None)
 
     def ignoreExt(self, ext):
         """Ignore the given extension.
@@ -298,12 +314,13 @@
         self.ignoredExts.append(ext)
 
     def directoryListing(self):
-        return dirlist.DirectoryLister(self.fp.path,
-                                       self.listChildren(),
-                                       self.contentTypes,
-                                       self.contentEncodings,
-                                       self.defaultType)
-
+        return self.listChildren().addCallback(lambda children: dirlist.DirectoryLister(
+                self.fp.path,
+                children,
+                self.contentTypes,
+                self.contentEncodings,
+                self.defaultType))
+                                        
     def putChild(self, name, child):
         """
         Register a child with the given name with this resource.
@@ -321,7 +338,7 @@
             return self
 
         child = self.putChildren.get(name, None)
-        if child: return child
+        if child: return succeed(child)
 
         child_fp = self.fp.child(name)
         if hasattr(self, "knownChildren"):
@@ -330,7 +347,7 @@
         if child_fp.exists():
             return self.createSimilarFile(child_fp)
         else:
-            return None
+            return succeed(None)
 
     def listChildren(self):
         """
@@ -340,21 +357,23 @@
         if self.fp.isdir():
             children += [c for c in self.fp.listdir() if c not in children]
             self.knownChildren = set(children)
-        return children
+        return succeed(children)
 
+    @inlineCallbacks
     def locateChild(self, req, segments):
         """
         See L{IResource}C{.locateChild}.
         """
         # If getChild() finds a child resource, return it
-        child = self.getChild(segments[0])
-        if child is not None: return (child, segments[1:])
+        child = (yield self.getChild(segments[0]))
+        if child is not None: returnValue((child, segments[1:]))
 
         # If we're not backed by a directory, we have no children.
         # But check for existance first; we might be a collection resource
         # that the request wants created.
         self.fp.restat(False)
-        if self.fp.exists() and not self.fp.isdir(): return (None, ())
+        if self.fp.exists() and not self.fp.isdir():
+            returnValue((None, ()))
 
         # OK, we need to return a child corresponding to the first segment
         path = segments[0]
@@ -363,23 +382,23 @@
             fpath = self.fp.child(path)
         else:
             # Request is for a directory (collection) resource
-            return (self, server.StopTraversal)
+            returnValue((self, server.StopTraversal))
 
         # Don't run processors on directories - if someone wants their own
         # customized directory rendering, subclass File instead.
         if fpath.isfile():
             processor = self.processors.get(fpath.splitext()[1].lower())
             if processor:
-                return (
+                returnValue((
                     processor(fpath.path),
-                    segments[1:])
+                    segments[1:]))
 
         elif not fpath.exists():
             sibling_fpath = fpath.siblingExtensionSearch(*self.ignoredExts)
             if sibling_fpath is not None:
                 fpath = sibling_fpath
 
-        return self.createSimilarFile(fpath.path), segments[1:]
+        returnValue((yield self.createSimilarFile(fpath.path)), segments[1:])
 
     def renderHTTP(self, req):
         self.fp.changed()
@@ -398,17 +417,18 @@
                 ifp = self.fp.childSearchPreauth(*self.indexNames)
                 if ifp:
                     # Render from the index file
-                    standin = self.createSimilarFile(ifp.path)
+                    # MOR: What is going on here?
+                    self.createSimilarFile(ifp.path).render(req)
                 else:
                     # Render from a DirectoryLister
-                    standin = dirlist.DirectoryLister(
-                        self.fp.path,
-                        self.listChildren(),
-                        self.contentTypes,
-                        self.contentEncodings,
-                        self.defaultType
-                    )
-                return standin.render(req)
+                    return self.listChildren().addCallback(
+                         lambda children: dirlist.DirectoryLister(
+                          self.fp.path,
+                          children,
+                          self.contentTypes,
+                          self.contentEncodings,
+                          self.defaultType
+                         ).render(req))
 
         try:
             f = self.fp.open()
@@ -434,8 +454,8 @@
         return response
 
     def createSimilarFile(self, path):
-        return self.__class__(path, self.defaultType, self.ignoredExts,
-                              self.processors, self.indexNames[:])
+        return succeed(self.__class__(path, self.defaultType, self.ignoredExts,
+                              self.processors, self.indexNames[:]))
 
 
 class FileSaver(resource.PostableResource):
@@ -604,7 +624,6 @@
 if __name__ == '__builtin__':
     # Running from twistd -y
     from twisted.application import service, strports
-    from twisted.web2 import server
     res = File('/')
     application = service.Application("demo")
     s = strports.service('8080', server.Site(res))
