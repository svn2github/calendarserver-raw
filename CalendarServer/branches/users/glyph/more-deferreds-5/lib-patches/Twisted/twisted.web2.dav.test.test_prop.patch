Index: twisted/web2/dav/test/test_prop.py
===================================================================
--- twisted/web2/dav/test/test_prop.py	(revision 27622)
+++ twisted/web2/dav/test/test_prop.py	(working copy)
@@ -21,18 +21,15 @@
 #
 # DRI: Wilfredo Sanchez, wsanchez@apple.com
 ##
-from twisted.web2.dav.element.rfc4331 import QuotaUsedBytes
-from twisted.web2.dav.element.rfc4331 import QuotaAvailableBytes
 
-import random
+from twisted.internet.defer import inlineCallbacks
 
-from twisted.trial.unittest import SkipTest
 from twisted.web2 import responsecode
 from twisted.web2.iweb import IResponse
 from twisted.web2.stream import MemoryStream
 from twisted.web2 import http_headers
 from twisted.web2.dav import davxml
-from twisted.web2.dav.resource import DAVResource
+
 from twisted.web2.dav.davxml import dav_namespace, lookupElement
 from twisted.web2.dav.util import davXMLFromStream
 from twisted.web2.test.test_server import SimpleRequest
@@ -60,6 +57,7 @@
     def liveProperties(self):
         return [lookupElement(qname)() for qname in self.resource_class.liveProperties if (qname[0] == dav_namespace) and qname not in dynamicLiveProperties]
 
+    @inlineCallbacks
     def test_PROPFIND_basic(self):
         """
         PROPFIND request
@@ -115,16 +113,17 @@
 
         query = davxml.PropertyFind(davxml.PropertyContainer(*self.liveProperties()))
 
-        request = SimpleRequest(self.site, "PROPFIND", "/")
+        for depth in ("0", "1", "infinity", None):
+            request = SimpleRequest(self.site, "PROPFIND", "/")
 
-        depth = random.choice(("0", "1", "infinity", None))
-        if depth is not None:
-            request.headers.setHeader("depth", depth)
+            if depth is not None:
+                request.headers.setHeader("depth", depth)
 
-        request.stream = MemoryStream(query.toxml())
+            request.stream = MemoryStream(query.toxml())
+            yield self.send(request, check_result)
 
-        return self.send(request, check_result)
 
+
     def test_PROPFIND_list(self):
         """
         PROPFIND with allprop, propname
@@ -142,7 +141,6 @@
 
         def check_xml(doc, which):
             response = doc.root_element.childOfType(davxml.PropertyStatusResponse)
-
             self.failUnless(
                 response.childOfType(davxml.HRef) == "/",
                 "Incorrect response URI: %s != /" % (response.childOfType(davxml.HRef),)
