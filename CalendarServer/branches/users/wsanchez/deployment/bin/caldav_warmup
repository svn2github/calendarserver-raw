#!/usr/bin/env python

##
# Copyright (c) 2006-2009 Apple Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

"""
This tool trawls through the server's data store, reading data.

This is useful for ensuring that any on-demand data format upgrades
are done.

This tool requires access to the calendar server's configuration and
data storage.
"""

import sys

sys.path.insert(0, "/usr/share/caldavd/lib/python")

import os
import sqlite3
from getopt import getopt, GetoptError
from os.path import dirname, abspath

from twisted.python import log
from twisted.python.reflect import namedClass
from twisted.web2.dav import davxml

from twistedcaldav import caldavxml
from twistedcaldav.resource import isPseudoCalendarCollectionResource
from twistedcaldav.static import CalDAVFile, CalendarHomeFile
from twistedcaldav.config import config, defaultConfigFile
from twistedcaldav.directory.directory import DirectoryService, DirectoryRecord

def loadConfig(configFileName):
    if configFileName is None:
        configFileName = defaultConfigFile

    if not os.path.isfile(configFileName):
        sys.stderr.write("No config file: %s\n" % (configFileName,))
        sys.exit(1)

    config.loadConfig(configFileName)

    return config

def getDirectory():
    BaseDirectoryService = namedClass(config.DirectoryService["type"])

    class MyDirectoryService (BaseDirectoryService):
        def getPrincipalCollection(self):
            if not hasattr(self, "_principalCollection"):
                #
                # Instantiating a CalendarHomeProvisioningResource with a directory
                # will register it with the directory (still smells like a hack).
                #
                # We need that in order to locate calendar homes via the directory.
                #
                from twistedcaldav.static import CalendarHomeProvisioningFile
                CalendarHomeProvisioningFile(os.path.join(config.DocumentRoot, "calendars"), self, "/calendars/")

                from twistedcaldav.directory.principal import DirectoryPrincipalProvisioningResource
                self._principalCollection = DirectoryPrincipalProvisioningResource("/principals/", self)

            return self._principalCollection

        def setPrincipalCollection(self, coll):
            # See principal.py line 237:  self.directory.principalCollection = self
            pass

        principalCollection = property(getPrincipalCollection, setPrincipalCollection)

        def calendarHomeForRecord(self, record):
            principal = self.principalCollection.principalForRecord(record)
            if principal:
                try:
                    return principal._calendarHome()
                except AttributeError:
                    pass
            return None

        def calendarHomeForShortName(self, recordType, shortName):
            principal = self.principalCollection.principalForShortName(recordType, shortName)
            if principal:
                try:
                    return principal._calendarHome()
                except AttributeError:
                    pass
            return None

        def principalForCalendarUserAddress(self, cua):
            return self.principalCollection.principalForCalendarUserAddress(cua)


    return MyDirectoryService(**config.DirectoryService["params"])

class DummyDirectoryService (DirectoryService):
    realmName = ""
    baseGUID = "51856FD4-5023-4890-94FE-4356C4AAC3E4"
    def recordTypes(self): return ()
    def listRecords(self): return ()
    def recordWithShortName(self): return None

dummyDirectoryRecord = DirectoryRecord(
    service = DummyDirectoryService(),
    recordType = "dummy",
    guid = "8EF0892F-7CB6-4B8E-B294-7C5A5321136A",
    shortName = "dummy",
    fullName = "Dummy McDummerson",
    calendarUserAddresses = set(),
    autoSchedule = False,
)

class UsageError (StandardError):
    pass

def usage(e=None):
    if e:
        print e
        print ""

    name = os.path.basename(sys.argv[0])
    print "usage: %s [options] [input_specifiers]" % (name,)
    print ""
    print "Warm up data store by reading everything once."
    print __doc__
    print "options:"
    print "  -h --help: print this help and exit"
    print "  -f --config: Specify caldavd.plist configuration path"
    print ""
    print "input specifiers:"
    print "  -a --all: add all calendar homes"
    print "  -H --home: add a calendar home (and all calendars within it)"
    print "  -r --record: add a directory record's calendar home (format: 'recordType:shortName')"
    print "  -u --user: add a user's calendar home (shorthand for '-r users:shortName')"
    print "  --no-icalendar: Don't read iCalendar data"
    print "  --no-properties: Don't read DAV properties"
    print "  --no-index: Don't read indexes"

    if e:
        sys.exit(64)
    else:
        sys.exit(0)

def main():
    try:
        (optargs, args) = getopt(
            sys.argv[1:], "hf:o:aH:r:u:", [
                "config=",
                "output=",
                "help",
                "all", "home=", "record=", "user=",
                "no-icalendar", "no-properties", "no-index",
            ],
        )
    except GetoptError, e:
        usage(e)

    configFileName = None
    outputFileName = None

    directory = None
    calendarHomePaths = set()
    records = set()
    allRecords = False
    readCalendarData = True
    readProperties = True
    readIndexes = True

    observer = log.FileLogObserver(open("/dev/stdout", "a"))
    log.addObserver(observer.emit)

    def checkExists(resource):
        if not resource.exists():
            sys.stderr.write("No such file: %s\n" % (resource.fp.path,))
            sys.exit(1)

    for opt, arg in optargs:
        if opt in ("-h", "--help"):
            usage()

        elif opt in ("-f", "--config"):
            configFileName = arg

        elif opt in ("-a", "--all"):
            allRecords = True

        elif opt in ("--no-icalendar",):
            readCalendarData = False

        elif opt in ("--no-properties",):
            readProperties = False

        elif opt in ("--no-indexes",):
            readIndexes = False

        elif opt in ("-H", "--home"):
            calendarHomePaths.add(arg)

        elif opt in ("-r", "--record"):
            try:
                recordType, shortName = arg.split(":", 1)
                if not recordType or not shortName:
                    raise ValueError()
            except ValueError:
                sys.stderr.write("Invalid record identifier: %r\n" % (arg,))
                sys.exit(1)

            records.add((recordType, shortName))

        elif opt in ("-u", "--user"):
            records.add((DirectoryService.recordType_users, arg))

    if args:
        usage("Too many arguments: %s" % (" ".join(args),))

    if records or allRecords or calendarHomePaths:
        loadConfig(configFileName)
        directory = getDirectory()

        calendarHomes = set()

        for path in calendarHomePaths:
            path = abspath(path)
            guid = os.path.basename(path)

            record = directory.recordWithGUID(guid)
            if record is None:
                record = dummyDirectoryRecord

            parent = CalDAVFile(dirname(abspath(path)))
            calendarHome = CalendarHomeFile(arg, parent, record)
            checkExists(calendarHome)
            calendarHomes.add(calendarHome)

        for record in records:
            recordType, shortName = record
            calendarHome = directory.calendarHomeForShortName(recordType, shortName)
            if not calendarHome:
                sys.stderr.write("No calendar home found for record: (%s)%s\n" % (recordType, shortName))
                sys.exit(1)
            calendarHomes.add(calendarHome)

        if allRecords:
            for record in directory.allRecords():
                calendarHome = directory.calendarHomeForRecord(record)
                if not calendarHome:
                    pass
                else:
                    calendarHomes.add(calendarHome)

    n = 0
    N = len(calendarHomes)
    for calendarHome in calendarHomes:
        n += 1
        log.msg("%.2f%% (%d of %d)" % (100.0 * n/N, n, N))
        processCalendarHome(
            calendarHome,
            directory = directory,
            readCalendarData = readCalendarData,
            readProperties = readProperties,
            readIndexes = readIndexes,
        )

def processCalendarHome(
    calendarHome,
    directory = None,
    readCalendarData = True,
    readProperties = True,
    readIndexes = True
):
    if readProperties:
        readPropertiesForResource(calendarHome)

    for childName in calendarHome.listChildren():
        child = calendarHome.getChild(childName)
        if isPseudoCalendarCollectionResource(child):
            if childName in ("inbox", "outbox"):
                child.provision()
            processCalendar(
                child,
                readCalendarData = readCalendarData,
                readProperties = readProperties,
                readIndexes = readIndexes,
            )
            # OMG NO SRLY FIXME
            if childName == "meetingmaker":
                #
                # Add calendar to F/B set
                #
                if calendarHome.record == dummyDirectoryRecord:
                    log.err("Unable to edit F/B info for %s" % (calendarHome,))
                    continue

                calendarURL = "/calendars/__uids__/%s/meetingmaker" % (calendarHome.record.guid,)

                inbox = calendarHome.getChild("inbox")

                if not inbox.hasDeadProperty(caldavxml.CalendarFreeBusySet):
                    needFB = True
                    hrefs = []
                else:
                    fbProp = inbox.readDeadProperty(caldavxml.CalendarFreeBusySet)
                    hrefs = list(fbProp.childrenOfType(davxml.HRef))

                    needFB = False

                    for href in hrefs:
                        if str(href) == calendarURL:
                            break
                    else:
                        needFB = True

                if needFB:
                    log.msg("Adding Meeting Maker calendar to F/B set for %s" % (calendarHome,))
                    hrefs.append(davxml.HRef(calendarURL))
                    fbProp = caldavxml.CalendarFreeBusySet(*hrefs)
                    inbox.writeDeadProperty(fbProp)

def processCalendar(
    calendarCollection,
    readCalendarData = True,
    readProperties = True,
    readIndexes = True
):
    if readProperties:
        readPropertiesForResource(calendarCollection)

    if readIndexes:
        try:
            for name, uid, type in calendarCollection.index().search(None):
                pass
        except sqlite3.OperationalError:
            # Outbox doesn't live on disk
            if calendarCollection.fp.basename() != "outbox":
                raise

    for name in calendarCollection.listChildren():
        child = calendarCollection.getChild(name)

        if readCalendarData:
            childCalendar = child.iCalendarText()
        if readProperties:
            readPropertiesForResource(child)

def readPropertiesForResource(resource):
    #log.msg(resource)
    for qname in tuple(resource.deadProperties().list()):
        try:
            property = resource.readDeadProperty(qname)
        except Exception, e:
            log.err("Error reading {%s}%s property on resource %s\n%s\n" % (qname[0], qname[1], resource, e))
            resource.removeDeadProperty(qname)

if __name__ == "__main__":
    main()
