Index: twisted/web2/dav/test/test_acl.py
===================================================================
--- twisted/web2/dav/test/test_acl.py	(revision 26346)
+++ twisted/web2/dav/test/test_acl.py	(working copy)
@@ -30,6 +30,7 @@
 from twisted.web2.auth import basic
 from twisted.web2.stream import MemoryStream
 from twisted.web2.dav import davxml
+from twisted.web2.dav.resource import DAVPrincipalCollectionResource
 from twisted.web2.dav.util import davXMLFromStream
 from twisted.web2.dav.auth import TwistedPasswordProperty, IPrincipal, DavRealm, TwistedPropertyChecker, AuthenticationWrapper
 from twisted.web2.dav.fileop import rmdir
@@ -39,74 +40,87 @@
 from twisted.web2.dav.test.util import Site, serialize
 from twisted.web2.dav.test.test_resource import TestResource, TestDAVPrincipalResource
 
+class TestPrincipalsCollection(DAVPrincipalCollectionResource, TestResource):
+    def __init__(self, url, children):
+        DAVPrincipalCollectionResource.__init__(self, url)
+        TestResource.__init__(self, url, children, principalCollections=(self,))
+    
+    def principalForUser(self, user):
+        return self.principalForShortName('users', user)
+
+    def principalForAuthID(self, creds):
+        return self.principalForShortName('users', creds.username)
+
+    def principalForShortName(self, type, shortName):
+        typeResource = self.children.get(type, None)
+        user = None
+        if typeResource:
+            user = typeResource.children.get(shortName, None)
+
+        return user
+
 class ACL(twisted.web2.dav.test.util.TestCase):
     """
     RFC 3744 (WebDAV ACL) tests.
     """
-    def _getDocumentRoot(self):
-        if not hasattr(self, "_docroot"):
-            docroot = self.mktemp()
-            os.mkdir(docroot)
-            rootresource = self.resource_class(docroot)
+    def createDocumentRoot(self):
+        docroot = self.mktemp()
+        os.mkdir(docroot)
 
-            portal = Portal(DavRealm())
-            portal.registerChecker(TwistedPropertyChecker())
+        userResource = TestDAVPrincipalResource("/principals/users/user01")
+        userResource.writeDeadProperty(TwistedPasswordProperty("user01"))
 
-            credentialFactories = (basic.BasicCredentialFactory(""),)
+        principalCollection = TestPrincipalsCollection(
+            "/principals/",
+            children={"users": TestPrincipalsCollection(
+                    "/principals/users/",
+                    children={"user01": userResource})})
 
-            loginInterfaces = (IPrincipal,)
+        rootResource = self.resource_class(
+            docroot, principalCollections=(principalCollection,))
 
-            self.site = Site(AuthenticationWrapper(
-                rootresource, 
-                portal,
-                credentialFactories,
-                loginInterfaces
-            ))
+        portal = Portal(DavRealm())
+        portal.registerChecker(TwistedPropertyChecker())
 
-            rootresource.setAccessControlList(self.grant(davxml.All()))
+        credentialFactories = (basic.BasicCredentialFactory(""),)
 
-            userresource = TestDAVPrincipalResource("/principals/user01")
-            userresource.writeDeadProperty(TwistedPasswordProperty.fromString("user01"))
+        loginInterfaces = (IPrincipal,)
 
-            rootresource.putChild(
-                "principals",
-                TestResource("/principals", {"user01": userresource})
-            )
+        self.site = Site(AuthenticationWrapper(
+            rootResource,
+            portal,
+            credentialFactories,
+            loginInterfaces
+        ))
 
-            rootresource.writeDeadProperty(
-                davxml.PrincipalCollectionSet(davxml.HRef("/principals/"))
-            )
+        rootResource.setAccessControlList(self.grant(davxml.All()))
 
-            for name, acl in (
-                ("none"       , self.grant()),
-                ("read"       , self.grant(davxml.Read())),
-                ("read-write" , self.grant(davxml.Read(), davxml.Write())),
-                ("unlock"     , self.grant(davxml.Unlock())),
-                ("all"        , self.grant(davxml.All())),
-            ):
-                filename = os.path.join(docroot, name)
-                if not os.path.isfile(filename):
-                    file(filename, "w").close()
-                resource = self.resource_class(filename)
-                resource.setAccessControlList(acl)
+        for name, acl in (
+            ("none"       , self.grant()),
+            ("read"       , self.grant(davxml.Read())),
+            ("read-write" , self.grant(davxml.Read(), davxml.Write())),
+            ("unlock"     , self.grant(davxml.Unlock())),
+            ("all"        , self.grant(davxml.All())),
+        ):
+            filename = os.path.join(docroot, name)
+            if not os.path.isfile(filename):
+                file(filename, "w").close()
+            resource = self.resource_class(filename)
+            resource.setAccessControlList(acl)
 
-            for name, acl in (
-                ("nobind" , self.grant()),
-                ("bind"   , self.grant(davxml.Bind())),
-                ("unbind" , self.grant(davxml.Bind(), davxml.Unbind())),
-            ):
-                dirname = os.path.join(docroot, name)
-                if not os.path.isdir(dirname):
-                    os.mkdir(dirname)
-                resource = self.resource_class(dirname)
-                resource.setAccessControlList(acl)
+        for name, acl in (
+            ("nobind" , self.grant()),
+            ("bind"   , self.grant(davxml.Bind())),
+            ("unbind" , self.grant(davxml.Bind(), davxml.Unbind())),
+        ):
+            dirname = os.path.join(docroot, name)
+            if not os.path.isdir(dirname):
+                os.mkdir(dirname)
+            resource = self.resource_class(dirname)
+            resource.setAccessControlList(acl)
+        return docroot
 
-            self._docroot = docroot
 
-        return self._docroot
-
-    docroot = property(_getDocumentRoot)
-
     def restore(self):
         if hasattr(self, "_docroot"):
             print "*"*40
@@ -342,9 +356,7 @@
                 if method == "GET":
                     ok = responsecode.OK
                 elif method == "REPORT":
-                    # BAD_REQUEST in the allowed case, because we're not actually
-                    # including the required XML in the request body.
-                    ok = responsecode.BAD_REQUEST
+                    ok = responsecode.MULTI_STATUS
                 else:
                     raise AssertionError("We shouldn't be here.  (method = %r)" % (method,))
 
@@ -358,6 +370,9 @@
                     path = os.path.join(self.docroot, name)
 
                     request = SimpleRequest(self.site, method, "/" + name)
+                    if method == "REPORT":
+                        request.stream = MemoryStream(davxml.PrincipalPropertySearch().toxml())
+
                     _add_auth_header(request)
 
                     def test(response, code=code, path=path):
