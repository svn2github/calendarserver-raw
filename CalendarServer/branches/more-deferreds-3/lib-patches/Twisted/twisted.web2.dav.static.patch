Index: twisted/web2/dav/static.py
===================================================================
--- twisted/web2/dav/static.py	(revision 26969)
+++ twisted/web2/dav/static.py	(working copy)
@@ -53,6 +53,14 @@
 
     Extends twisted.web2.static.File to handle WebDAV methods.
     """
+    @classmethod
+    def fetch(cls, request, path, *args, **kwargs):
+        """
+        stuff etc
+        """
+        return succeed(cls(path, *args, **kwargs))
+
+
     def __init__(
         self, path,
         defaultType="text/plain", indexNames=None,
@@ -82,12 +90,26 @@
     ##
 
     def etag(self):
-        if not self.fp.exists(): return None
-        if self.hasDeadProperty(TwistedGETContentMD5):
-            return http_headers.ETag(str(self.readDeadProperty(TwistedGETContentMD5)))
+        if not self.fp.exists():
+            yield None
+            return
+
+        hasProp = waitForDeferred(self.hasDeadProperty(TwistedGETContentMD5))
+        yield hasProp
+        hasProp = hasProp.getResult()
+        if hasProp:
+            propValue = waitForDeferred(self.readDeadProperty(TwistedGETContentMD5))
+            yield propValue
+            propValue = propValue.getResult()
+            yield http_headers.ETag(str(propValue))
         else:
-            return super(DAVFile, self).etag()
+            d = waitForDeferred(super(DAVFile, self).etag())
+            yield d
+            d = d.getResult()
+            yield d
 
+    etag = deferredGenerator(etag)
+
     def davComplianceClasses(self):
         return ("1", "access-control") # Add "2" when we have locking
 
@@ -192,7 +214,7 @@
         return (self.createSimilarFile(self.fp.child(path).path), segments[1:])
 
     def createSimilarFile(self, path):
-        return self.__class__(
+        return self.__class__.fetch(None, 
             path, defaultType=self.defaultType, indexNames=self.indexNames[:],
             principalCollections=self.principalCollections())
 
