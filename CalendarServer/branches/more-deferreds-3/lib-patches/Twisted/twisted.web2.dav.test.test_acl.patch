Index: twisted/web2/dav/test/test_acl.py
===================================================================
--- twisted/web2/dav/test/test_acl.py	(revision 26969)
+++ twisted/web2/dav/test/test_acl.py	(working copy)
@@ -26,6 +26,8 @@
 
 from twisted.cred.portal import Portal
 
+from twisted.internet.defer import waitForDeferred, deferredGenerator
+
 from twisted.web2 import responsecode
 from twisted.web2.auth import basic
 from twisted.web2.stream import MemoryStream
@@ -68,7 +70,9 @@
         os.mkdir(docroot)
 
         userResource = TestDAVPrincipalResource("/principals/users/user01")
-        userResource.writeDeadProperty(TwistedPasswordProperty("user01"))
+        d = waitForDeferred(userResource.writeDeadProperty(TwistedPasswordProperty("user01")))
+        yield d
+        d = d.getResult()
 
         principalCollection = TestPrincipalsCollection(
             "/principals/",
@@ -118,8 +122,9 @@
                 os.mkdir(dirname)
             resource = self.resource_class(dirname)
             resource.setAccessControlList(acl)
-        return docroot
+        yield docroot
 
+    createDocumentRoot = deferredGenerator(createDocumentRoot)
 
     def restore(self):
         # Get rid of whatever messed up state the test has now so that we'll
@@ -134,24 +139,32 @@
         Verify source access controls during COPY and MOVE.
         """
         def work():
-            dst_path = os.path.join(self.docroot, "copy_dst")
+            docroot = waitForDeferred(self.docroot)
+            yield docroot
+            docroot = docroot.getResult()
+            dst_path = os.path.join(docroot, "copy_dst")
             dst_uri = "/" + os.path.basename(dst_path)
 
+            results = []
             for src, status in (
                 ("nobind", responsecode.FORBIDDEN),
                 ("bind",   responsecode.FORBIDDEN),
                 ("unbind", responsecode.CREATED),
             ):
-                src_path = os.path.join(self.docroot, "src_" + src)
+                src_path = os.path.join(docroot, "src_" + src)
                 src_uri = "/" + os.path.basename(src_path)
                 if not os.path.isdir(src_path):
                     os.mkdir(src_path)
                 src_resource = self.resource_class(src_path)
-                src_resource.setAccessControlList({
+
+                d = waitForDeferred(src_resource.setAccessControlList({
                     "nobind": self.grant(),
                     "bind"  : self.grant(davxml.Bind()),
                     "unbind": self.grant(davxml.Bind(), davxml.Unbind())
-                }[src])
+                }[src]))
+                yield d
+                d.getResult()
+
                 for name, acl in (
                     ("none"       , self.grant()),
                     ("read"       , self.grant(davxml.Read())),
@@ -162,8 +175,11 @@
                     filename = os.path.join(src_path, name)
                     if not os.path.isfile(filename):
                         file(filename, "w").close()
-                    self.resource_class(filename).setAccessControlList(acl)
 
+                    d = waitForDeferred(self.resource_class(filename).setAccessControlList(acl))
+                    yield d
+                    d.getResult()
+
                 for method in ("COPY", "MOVE"):
                     for name, code in (
                         ("none"       , {"COPY": responsecode.FORBIDDEN, "MOVE": status}[method]),
@@ -175,7 +191,11 @@
                         path = os.path.join(src_path, name)
                         uri = src_uri + "/" + name
     
-                        request = SimpleRequest(self.site, method, uri)
+                        site = waitForDeferred(self.site)
+                        yield site
+                        site = site.getResult()
+
+                        request = SimpleRequest(site, method, uri)
                         request.headers.setHeader("destination", dst_uri)
                         _add_auth_header(request)
     
@@ -184,30 +204,56 @@
                                 os.remove(dst_path)
     
                             if response.code != code:
-                                return self.oops(request, response, code, method, name)
+                                d = waitForDeferred(self.oops(request, response, code, method, name))
+                                yield d
+                                d = d.getResult()
+                                yield d
+                                return
     
-                        yield (request, test)
+                        results.append( (request, test) )
 
-        return serialize(self.send, work())
+            yield results
 
+        work = deferredGenerator(work)
+
+        d = waitForDeferred(work())
+        yield d
+        results = d.getResult()
+
+        d = waitForDeferred(serialize(self.send, iter(results)))
+        yield d
+        d = d.getResult()
+        yield d
+
+    test_COPY_MOVE_source = deferredGenerator(test_COPY_MOVE_source)
+
+
     def test_COPY_MOVE_dest(self):
         """
         Verify destination access controls during COPY and MOVE.
         """
         def work():
-            src_path = os.path.join(self.docroot, "read")
+            docroot = waitForDeferred(self.docroot)
+            yield docroot
+            docroot = docroot.getResult()
+            src_path = os.path.join(docroot, "read")
             uri = "/" + os.path.basename(src_path)
 
+            results = []
             for method in ("COPY", "MOVE"):
                 for name, code in (
                     ("nobind" , responsecode.FORBIDDEN),
                     ("bind"   , responsecode.CREATED),
                     ("unbind" , responsecode.CREATED),
                 ):
-                    dst_parent_path = os.path.join(self.docroot, name)
+                    dst_parent_path = os.path.join(docroot, name)
                     dst_path = os.path.join(dst_parent_path, "dst")
 
-                    request = SimpleRequest(self.site, method, uri)
+                    site = waitForDeferred(self.site)
+                    yield site
+                    site = site.getResult()
+
+                    request = SimpleRequest(site, method, uri)
                     request.headers.setHeader("destination", "/" + name + "/dst")
                     _add_auth_header(request)
 
@@ -216,39 +262,80 @@
                             os.remove(dst_path)
 
                         if response.code != code:
-                            return self.oops(request, response, code, method, name)
+                            d = waitForDeferred(self.oops(request, response, code, method, name))
+                            yield d
+                            d = d.getResult()
+                            yield d
+                            return
 
-                    yield (request, test)
+                    results.append((request, test))
                     self.restore()
 
-        return serialize(self.send, work())
+            yield results
 
+        work = deferredGenerator(work)
+
+        d = waitForDeferred(work())
+        yield d
+        results = d.getResult()
+
+        d = waitForDeferred(serialize(self.send, iter(results)))
+        yield d
+        d = d.getResult()
+        yield d
+
+    test_COPY_MOVE_dest = deferredGenerator(test_COPY_MOVE_dest)
+
     def test_DELETE(self):
         """
         Verify access controls during DELETE.
         """
         def work():
+            docroot = waitForDeferred(self.docroot)
+            yield docroot
+            docroot = docroot.getResult()
+            results = []
             for name, code in (
                 ("nobind" , responsecode.FORBIDDEN),
                 ("bind"   , responsecode.FORBIDDEN),
                 ("unbind" , responsecode.NO_CONTENT),
             ):
-                collection_path = os.path.join(self.docroot, name)
+                collection_path = os.path.join(docroot, name)
                 path = os.path.join(collection_path, "dst")
 
                 file(path, "w").close()
 
-                request = SimpleRequest(self.site, "DELETE", "/" + name + "/dst")
+                site = waitForDeferred(self.site)
+                yield site
+                site = site.getResult()
+
+                request = SimpleRequest(site, "DELETE", "/" + name + "/dst")
                 _add_auth_header(request)
 
                 def test(response, code=code, path=path):
                     if response.code != code:
-                        return self.oops(request, response, code, "DELETE", name)
+                        d = waitForDeferred(self.oops(request, response, code, "DELETE", name))
+                        yield d
+                        d = d.getResult()
+                        yield d
+                        return
 
-                yield (request, test)
+                results.append((request, test))
 
-        return serialize(self.send, work())
+            yield results
 
+        work = deferredGenerator(work)
+
+        d = waitForDeferred(work())
+        yield d
+        results = d.getResult()
+
+        d = waitForDeferred(serialize(self.send, iter(results)))
+        yield d
+        d = d.getResult()
+        yield d
+
+
     def test_UNLOCK(self):
         """
         Verify access controls during UNLOCK of unowned lock.
@@ -261,14 +348,19 @@
         """
         Verify access controls during MKCOL.
         """
-        for method in ("MKCOL", "PUT"):
-            def work():
+        def work():
+            docroot = waitForDeferred(self.docroot)
+            yield docroot
+            docroot = docroot.getResult()
+            results = []
+
+            for method in ("MKCOL", "PUT"):
                 for name, code in (
                     ("nobind" , responsecode.FORBIDDEN),
                     ("bind"   , responsecode.CREATED),
                     ("unbind" , responsecode.CREATED),
                 ):
-                    collection_path = os.path.join(self.docroot, name)
+                    collection_path = os.path.join(docroot, name)
                     path = os.path.join(collection_path, "dst")
 
                     if os.path.isfile(path):
@@ -276,22 +368,45 @@
                     elif os.path.isdir(path):
                         os.rmdir(path)
 
-                    request = SimpleRequest(self.site, method, "/" + name + "/dst")
+                    site = waitForDeferred(self.site)
+                    yield site
+                    site = site.getResult()
+                    request = SimpleRequest(site, method, "/" + name + "/dst")
                     _add_auth_header(request)
 
                     def test(response, code=code, path=path):
                         if response.code != code:
-                            return self.oops(request, response, code, method, name)
+                            d = waitForDeferred(self.oops(request, response, code, "DELETE", name))
+                            yield d
+                            d = d.getResult()
+                            yield d
+                            return
 
-                    yield (request, test)
+                    results.append((request, test))
 
-        return serialize(self.send, work())
+            yield results
 
+        work = deferredGenerator(work)
+
+        d = waitForDeferred(work())
+        yield d
+        results = d.getResult()
+
+        d = waitForDeferred(serialize(self.send, iter(results)))
+        yield d
+        d = d.getResult()
+        yield d
+
+
     def test_PUT_exists(self):
         """
         Verify access controls during PUT of existing file.
         """
         def work():
+            docroot = waitForDeferred(self.docroot)
+            yield docroot
+            docroot = docroot.getResult()
+            results = []
             for name, code in (
                 ("none"       , responsecode.FORBIDDEN),
                 ("read"       , responsecode.FORBIDDEN),
@@ -299,19 +414,38 @@
                 ("unlock"     , responsecode.FORBIDDEN),
                 ("all"        , responsecode.NO_CONTENT),
             ):
-                path = os.path.join(self.docroot, name)
+                path = os.path.join(docroot, name)
 
-                request = SimpleRequest(self.site, "PUT", "/" + name)
+                site = waitForDeferred(self.site)
+                yield site
+                site = site.getResult()
+                request = SimpleRequest(site, "PUT", "/" + name)
                 _add_auth_header(request)
 
                 def test(response, code=code, path=path):
                     if response.code != code:
-                        return self.oops(request, response, code, "PUT", name)
+                        d = waitForDeferred(self.oops(request, response, code, "PUT", name))
+                        yield d
+                        d = d.getResult()
+                        yield d
+                        return
 
-                yield (request, test)
+                results.append((request, test))
 
-        return serialize(self.send, work())
+            yield results
 
+        work = deferredGenerator(work)
+
+        d = waitForDeferred(work())
+        yield d
+        results = d.getResult()
+
+        d = waitForDeferred(serialize(self.send, iter(results)))
+        yield d
+        d = d.getResult()
+        yield d
+
+
     def test_PROPFIND(self):
         """
         Verify access controls during PROPFIND.
@@ -325,6 +459,10 @@
         Verify access controls during PROPPATCH.
         """
         def work():
+            docroot = waitForDeferred(self.docroot)
+            yield docroot
+            docroot = docroot.getResult()
+            results = []
             for name, code in (
                 ("none"       , responsecode.FORBIDDEN),
                 ("read"       , responsecode.FORBIDDEN),
@@ -332,9 +470,12 @@
                 ("unlock"     , responsecode.FORBIDDEN),
                 ("all"        , responsecode.MULTI_STATUS),
             ):
-                path = os.path.join(self.docroot, name)
+                path = os.path.join(docroot, name)
 
-                request = SimpleRequest(self.site, "PROPPATCH", "/" + name)
+                site = waitForDeferred(self.site)
+                yield site
+                site = site.getResult()
+                request = SimpleRequest(site, "PROPPATCH", "/" + name)
                 request.stream = MemoryStream(
                     davxml.WebDAVDocument(davxml.PropertyUpdate()).toxml()
                 )
@@ -342,17 +483,36 @@
 
                 def test(response, code=code, path=path):
                     if response.code != code:
-                        return self.oops(request, response, code, "PROPPATCH", name)
+                        d = waitForDeferred(self.oops(request, response, code, "PROPPATCH", name))
+                        yield d
+                        d = d.getResult()
+                        yield d
+                        return
 
-                yield (request, test)
+                results.append((request, test))
 
-        return serialize(self.send, work())
+            yield results
 
+        work = deferredGenerator(work)
+
+        d = waitForDeferred(work())
+        yield d
+        results = d.getResult()
+
+        d = waitForDeferred(serialize(self.send, iter(results)))
+        yield d
+        d = d.getResult()
+        yield d
+
     def test_GET_REPORT(self):
         """
         Verify access controls during GET and REPORT.
         """
         def work():
+            docroot = waitForDeferred(self.docroot)
+            yield docroot
+            docroot = docroot.getResult()
+            results = []
             for method in ("GET", "REPORT"):
                 if method == "GET":
                     ok = responsecode.OK
@@ -368,9 +528,12 @@
                     ("unlock"     , responsecode.FORBIDDEN),
                     ("all"        , ok),
                 ):
-                    path = os.path.join(self.docroot, name)
+                    path = os.path.join(docroot, name)
 
-                    request = SimpleRequest(self.site, method, "/" + name)
+                    site = waitForDeferred(self.site)
+                    yield site
+                    site = site.getResult()
+                    request = SimpleRequest(site, method, "/" + name)
                     if method == "REPORT":
                         request.stream = MemoryStream(davxml.PrincipalPropertySearch().toxml())
 
@@ -378,12 +541,27 @@
 
                     def test(response, code=code, path=path):
                         if response.code != code:
-                            return self.oops(request, response, code, method, name)
+                            d = waitForDeferred(self.oops(request, response, code, method, name))
+                            yield d
+                            d = d.getResult()
+                            yield d
 
-                    yield (request, test)
+                    results.append((request, test))
 
-        return serialize(self.send, work())
+            yield results
 
+        work = deferredGenerator(work)
+
+        d = waitForDeferred(work())
+        yield d
+        results = d.getResult()
+
+        d = waitForDeferred(serialize(self.send, iter(results)))
+        yield d
+        d = d.getResult()
+        yield d
+
+
     def oops(self, request, response, code, method, name):
         def gotResponseData(doc):
             if doc is None:
